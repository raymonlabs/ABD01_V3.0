
ABD01_V3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003288  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033ac  080033ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080033ac  080033ac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033ac  080033ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033b0  080033b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080033b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000010  080033c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080033c4  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e1d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168d  00000000  00000000  00028e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fac5  00000000  00000000  0002b860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aea5  00000000  00000000  0003b325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061a29  00000000  00000000  000461ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a7bf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002458  00000000  00000000  000a7c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003330 	.word	0x08003330

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003330 	.word	0x08003330

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <pwmDutySet>:
/* USER CODE BEGIN 0 */

/* Driver *****************************************************************************/
// PWM Duty Set
void pwmDutySet(const int duty)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if((duty >= 0) && (duty <= 100))
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	db11      	blt.n	8000252 <pwmDutySet+0x32>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b64      	cmp	r3, #100	; 0x64
 8000232:	dc0e      	bgt.n	8000252 <pwmDutySet+0x32>
    {
        if((duty == 0) || (duty == 100))
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d002      	beq.n	8000240 <pwmDutySet+0x20>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b64      	cmp	r3, #100	; 0x64
 800023e:	d103      	bne.n	8000248 <pwmDutySet+0x28>
        {
            TIM14->CCR1 = ((100 / 100) * duty);
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <pwmDutySet+0x44>)
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	635a      	str	r2, [r3, #52]	; 0x34
        if((duty == 0) || (duty == 100))
 8000246:	e008      	b.n	800025a <pwmDutySet+0x3a>
        }
        else
        {
            TIM14->CCR1 = ((100 / 100) * duty) - 1;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	1e5a      	subs	r2, r3, #1
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <pwmDutySet+0x44>)
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
        if((duty == 0) || (duty == 100))
 8000250:	e003      	b.n	800025a <pwmDutySet+0x3a>
        }
    }
    else
    {
        TIM14->CCR1 = 0;
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <pwmDutySet+0x44>)
 8000254:	2200      	movs	r2, #0
 8000256:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	46bd      	mov	sp, r7
 800025e:	b002      	add	sp, #8
 8000260:	bd80      	pop	{r7, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	40002000 	.word	0x40002000

08000268 <buzzerControl>:

// Buzzer Control
void buzzerControl(const eBuzMode_t mode, const int count)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	0002      	movs	r2, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b03      	cmp	r3, #3
 800027c:	d028      	beq.n	80002d0 <buzzerControl+0x68>
 800027e:	dc40      	bgt.n	8000302 <buzzerControl+0x9a>
 8000280:	2b02      	cmp	r3, #2
 8000282:	d00d      	beq.n	80002a0 <buzzerControl+0x38>
 8000284:	dc3d      	bgt.n	8000302 <buzzerControl+0x9a>
 8000286:	2b00      	cmp	r3, #0
 8000288:	d002      	beq.n	8000290 <buzzerControl+0x28>
 800028a:	2b01      	cmp	r3, #1
 800028c:	d004      	beq.n	8000298 <buzzerControl+0x30>
 800028e:	e038      	b.n	8000302 <buzzerControl+0x9a>
	{
		case buzz_off: TIM3->CCR1 = 0; break;
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <buzzerControl+0xac>)
 8000292:	2200      	movs	r2, #0
 8000294:	635a      	str	r2, [r3, #52]	; 0x34
 8000296:	e038      	b.n	800030a <buzzerControl+0xa2>
		case buzz_on: TIM3->CCR1 = 125; break;
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <buzzerControl+0xac>)
 800029a:	227d      	movs	r2, #125	; 0x7d
 800029c:	635a      	str	r2, [r3, #52]	; 0x34
 800029e:	e034      	b.n	800030a <buzzerControl+0xa2>
		case buzz_long:
			for(int idx = 0; idx < count; idx++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e00f      	b.n	80002c6 <buzzerControl+0x5e>
			{
				TIM3->CCR1 = 125;
 80002a6:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <buzzerControl+0xac>)
 80002a8:	227d      	movs	r2, #125	; 0x7d
 80002aa:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1500);
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <buzzerControl+0xb0>)
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 ff28 	bl	8001104 <HAL_Delay>
				TIM3->CCR1 = 0;
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <buzzerControl+0xac>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 80002ba:	200a      	movs	r0, #10
 80002bc:	f000 ff22 	bl	8001104 <HAL_Delay>
			for(int idx = 0; idx < count; idx++)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	dbeb      	blt.n	80002a6 <buzzerControl+0x3e>
			}

		break;
 80002ce:	e01c      	b.n	800030a <buzzerControl+0xa2>
		case buzz_short:
			for(int idx = 0; idx < count; idx++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
 80002d4:	e010      	b.n	80002f8 <buzzerControl+0x90>
			{
				TIM3->CCR1 = 125;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <buzzerControl+0xac>)
 80002d8:	227d      	movs	r2, #125	; 0x7d
 80002da:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(300);
 80002dc:	2396      	movs	r3, #150	; 0x96
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 ff0f 	bl	8001104 <HAL_Delay>
				TIM3->CCR1 = 0;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <buzzerControl+0xac>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(100);
 80002ec:	2064      	movs	r0, #100	; 0x64
 80002ee:	f000 ff09 	bl	8001104 <HAL_Delay>
			for(int idx = 0; idx < count; idx++)
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	3301      	adds	r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbea      	blt.n	80002d6 <buzzerControl+0x6e>
			}
		break;
 8000300:	e003      	b.n	800030a <buzzerControl+0xa2>
		default: TIM3->CCR1 = 0; break;
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <buzzerControl+0xac>)
 8000304:	2200      	movs	r2, #0
 8000306:	635a      	str	r2, [r3, #52]	; 0x34
 8000308:	46c0      	nop			; (mov r8, r8)
	}
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b004      	add	sp, #16
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40000400 	.word	0x40000400
 8000318:	000005dc 	.word	0x000005dc

0800031c <adcRead>:

// ADC Read
uint32_t adcRead(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	uint32_t value;

	HAL_ADC_Start(&hadc);
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <adcRead+0x38>)
 8000324:	0018      	movs	r0, r3
 8000326:	f001 f851 	bl	80013cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800032a:	2301      	movs	r3, #1
 800032c:	425a      	negs	r2, r3
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <adcRead+0x38>)
 8000330:	0011      	movs	r1, r2
 8000332:	0018      	movs	r0, r3
 8000334:	f001 f89e 	bl	8001474 <HAL_ADC_PollForConversion>
	HAL_Delay(100);
 8000338:	2064      	movs	r0, #100	; 0x64
 800033a:	f000 fee3 	bl	8001104 <HAL_Delay>
	value = HAL_ADC_GetValue(&hadc);
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <adcRead+0x38>)
 8000340:	0018      	movs	r0, r3
 8000342:	f001 f92f 	bl	80015a4 <HAL_ADC_GetValue>
 8000346:	0003      	movs	r3, r0
 8000348:	607b      	str	r3, [r7, #4]

	return value;
 800034a:	687b      	ldr	r3, [r7, #4]
}
 800034c:	0018      	movs	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	b002      	add	sp, #8
 8000352:	bd80      	pop	{r7, pc}
 8000354:	2000002c 	.word	0x2000002c

08000358 <ledColor>:

// LED Color Set
void ledColor(eLedColor_t ledColor)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	0002      	movs	r2, r0
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	701a      	strb	r2, [r3, #0]
    switch(ledColor)
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b07      	cmp	r3, #7
 800036a:	d834      	bhi.n	80003d6 <ledColor+0x7e>
 800036c:	009a      	lsls	r2, r3, #2
 800036e:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <ledColor+0x94>)
 8000370:	18d3      	adds	r3, r2, r3
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	469f      	mov	pc, r3
    {
        case color_none:
            ledControl(led_off, led_off, led_off); break;
 8000376:	2201      	movs	r2, #1
 8000378:	2101      	movs	r1, #1
 800037a:	2001      	movs	r0, #1
 800037c:	f000 f838 	bl	80003f0 <ledControl>
 8000380:	e02f      	b.n	80003e2 <ledColor+0x8a>
        case color_red:
            ledControl(led_on, led_off, led_off); break;
 8000382:	2201      	movs	r2, #1
 8000384:	2101      	movs	r1, #1
 8000386:	2000      	movs	r0, #0
 8000388:	f000 f832 	bl	80003f0 <ledControl>
 800038c:	e029      	b.n	80003e2 <ledColor+0x8a>
        case color_green:
            ledControl(led_off, led_on, led_off); break;
 800038e:	2201      	movs	r2, #1
 8000390:	2100      	movs	r1, #0
 8000392:	2001      	movs	r0, #1
 8000394:	f000 f82c 	bl	80003f0 <ledControl>
 8000398:	e023      	b.n	80003e2 <ledColor+0x8a>
        case color_blue:
            ledControl(led_off, led_off, led_on); break;
 800039a:	2200      	movs	r2, #0
 800039c:	2101      	movs	r1, #1
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 f826 	bl	80003f0 <ledControl>
 80003a4:	e01d      	b.n	80003e2 <ledColor+0x8a>
        case color_yellow:
            ledControl(led_on, led_on, led_off); break;
 80003a6:	2201      	movs	r2, #1
 80003a8:	2100      	movs	r1, #0
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 f820 	bl	80003f0 <ledControl>
 80003b0:	e017      	b.n	80003e2 <ledColor+0x8a>
        case color_magenta:
            ledControl(led_on, led_off, led_on); break;
 80003b2:	2200      	movs	r2, #0
 80003b4:	2101      	movs	r1, #1
 80003b6:	2000      	movs	r0, #0
 80003b8:	f000 f81a 	bl	80003f0 <ledControl>
 80003bc:	e011      	b.n	80003e2 <ledColor+0x8a>
        case color_cyan:
            ledControl(led_off, led_on, led_on); break;
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 f814 	bl	80003f0 <ledControl>
 80003c8:	e00b      	b.n	80003e2 <ledColor+0x8a>
        case color_white:
            ledControl(led_on, led_on, led_on); break;
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 f80e 	bl	80003f0 <ledControl>
 80003d4:	e005      	b.n	80003e2 <ledColor+0x8a>
        default:
            ledControl(led_off, led_off, led_off); break;
 80003d6:	2201      	movs	r2, #1
 80003d8:	2101      	movs	r1, #1
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 f808 	bl	80003f0 <ledControl>
 80003e0:	46c0      	nop			; (mov r8, r8)
    }
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	08003368 	.word	0x08003368

080003f0 <ledControl>:

// LED Control
void ledControl(eLedStatus_t led_r, eLedStatus_t led_g, eLedStatus_t led_b)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	0004      	movs	r4, r0
 80003f8:	0008      	movs	r0, r1
 80003fa:	0011      	movs	r1, r2
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	1c22      	adds	r2, r4, #0
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	1dbb      	adds	r3, r7, #6
 8000404:	1c02      	adds	r2, r0, #0
 8000406:	701a      	strb	r2, [r3, #0]
 8000408:	1d7b      	adds	r3, r7, #5
 800040a:	1c0a      	adds	r2, r1, #0
 800040c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, led_r);
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	0099      	lsls	r1, r3, #2
 8000416:	2390      	movs	r3, #144	; 0x90
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	0018      	movs	r0, r3
 800041c:	f001 fc99 	bl	8001d52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, led_g);
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	0059      	lsls	r1, r3, #1
 8000428:	2390      	movs	r3, #144	; 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fc90 	bl	8001d52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, led_b);
 8000432:	1d7b      	adds	r3, r7, #5
 8000434:	781a      	ldrb	r2, [r3, #0]
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	00d9      	lsls	r1, r3, #3
 800043a:	2390      	movs	r3, #144	; 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	0018      	movs	r0, r3
 8000440:	f001 fc87 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b003      	add	sp, #12
 800044a:	bd90      	pop	{r4, r7, pc}

0800044c <boostEnable>:

void boostEnable(GPIO_PinState bstStatus)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	0002      	movs	r2, r0
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(BST_EN_GPIO_Port, BST_EN_Pin, bstStatus);
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	781a      	ldrb	r2, [r3, #0]
 800045c:	2390      	movs	r3, #144	; 0x90
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fc75 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b002      	add	sp, #8
 800046e:	bd80      	pop	{r7, pc}

08000470 <deviceInit>:
/**************************************************************************************/

/* Application ************************************************************************/
// LED ROTATE 100ms
void deviceInit(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
    // GPIO ALL OFF
    HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_RESET); //AMP OFF
 8000474:	2390      	movs	r3, #144	; 0x90
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2200      	movs	r2, #0
 800047a:	2120      	movs	r1, #32
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fc68 	bl	8001d52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BST_EN_GPIO_Port, BST_EN_Pin, GPIO_PIN_RESET); // BOOSTER OFF
 8000482:	2390      	movs	r3, #144	; 0x90
 8000484:	05db      	lsls	r3, r3, #23
 8000486:	2200      	movs	r2, #0
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	0018      	movs	r0, r3
 800048c:	f001 fc61 	bl	8001d52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_CHG_GPIO_Port, LED_CHG_Pin, GPIO_PIN_RESET); // CHG LED OFF
 8000490:	4b27      	ldr	r3, [pc, #156]	; (8000530 <deviceInit+0xc0>)
 8000492:	2200      	movs	r2, #0
 8000494:	2102      	movs	r1, #2
 8000496:	0018      	movs	r0, r3
 8000498:	f001 fc5b 	bl	8001d52 <HAL_GPIO_WritePin>

    // PWM START
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);    // Buzzer PWM
 800049c:	4b25      	ldr	r3, [pc, #148]	; (8000534 <deviceInit+0xc4>)
 800049e:	2100      	movs	r1, #0
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 f967 	bl	8002774 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// FAN PWM
 80004a6:	4b24      	ldr	r3, [pc, #144]	; (8000538 <deviceInit+0xc8>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 f962 	bl	8002774 <HAL_TIM_PWM_Start>

    // PWM Init
    pwmDutySet(0);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff feb5 	bl	8000220 <pwmDutySet>
    buzzerControl(buzz_off, 0);
 80004b6:	2100      	movs	r1, #0
 80004b8:	2000      	movs	r0, #0
 80004ba:	f7ff fed5 	bl	8000268 <buzzerControl>

    // ADC START
    HAL_ADC_Start(&hadc);
 80004be:	4b1f      	ldr	r3, [pc, #124]	; (800053c <deviceInit+0xcc>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 ff83 	bl	80013cc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, 10);
 80004c6:	4b1d      	ldr	r3, [pc, #116]	; (800053c <deviceInit+0xcc>)
 80004c8:	210a      	movs	r1, #10
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 ffd2 	bl	8001474 <HAL_ADC_PollForConversion>

    // LED Initial
    // RED
    ledColor(color_red);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f7ff ff41 	bl	8000358 <ledColor>
    HAL_Delay(250);
 80004d6:	20fa      	movs	r0, #250	; 0xfa
 80004d8:	f000 fe14 	bl	8001104 <HAL_Delay>
    // GRN
    ledColor(color_green);
 80004dc:	2002      	movs	r0, #2
 80004de:	f7ff ff3b 	bl	8000358 <ledColor>
    HAL_Delay(250);
 80004e2:	20fa      	movs	r0, #250	; 0xfa
 80004e4:	f000 fe0e 	bl	8001104 <HAL_Delay>
    // BLU
    ledColor(color_blue);
 80004e8:	2003      	movs	r0, #3
 80004ea:	f7ff ff35 	bl	8000358 <ledColor>
    HAL_Delay(250);
 80004ee:	20fa      	movs	r0, #250	; 0xfa
 80004f0:	f000 fe08 	bl	8001104 <HAL_Delay>
    // YEL
    ledColor(color_yellow);
 80004f4:	2004      	movs	r0, #4
 80004f6:	f7ff ff2f 	bl	8000358 <ledColor>
    HAL_Delay(250);
 80004fa:	20fa      	movs	r0, #250	; 0xfa
 80004fc:	f000 fe02 	bl	8001104 <HAL_Delay>
    // MAGENTA
    ledColor(color_magenta);
 8000500:	2005      	movs	r0, #5
 8000502:	f7ff ff29 	bl	8000358 <ledColor>
    HAL_Delay(250);
 8000506:	20fa      	movs	r0, #250	; 0xfa
 8000508:	f000 fdfc 	bl	8001104 <HAL_Delay>
    // CYAN
    ledColor(color_cyan);
 800050c:	2006      	movs	r0, #6
 800050e:	f7ff ff23 	bl	8000358 <ledColor>
    HAL_Delay(250);
 8000512:	20fa      	movs	r0, #250	; 0xfa
 8000514:	f000 fdf6 	bl	8001104 <HAL_Delay>
    // WHT
    ledColor(color_white);
 8000518:	2007      	movs	r0, #7
 800051a:	f7ff ff1d 	bl	8000358 <ledColor>
    HAL_Delay(250);
 800051e:	20fa      	movs	r0, #250	; 0xfa
 8000520:	f000 fdf0 	bl	8001104 <HAL_Delay>
    // LED ALL OFF
    ledColor(color_none);
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ff17 	bl	8000358 <ledColor>
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	48001400 	.word	0x48001400
 8000534:	2000006c 	.word	0x2000006c
 8000538:	200000b4 	.word	0x200000b4
 800053c:	2000002c 	.word	0x2000002c

08000540 <readSwitchStatus>:

void readSwitchStatus(int	* const status_count,
					  bool	* const mode_change,
					  int	* const befor_mode)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
    int time_count = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
    // sratus_count = 2 : System Active Mode    (FAN 65%, )
    // sratus_count = 3 : System Active Mode    (FAN 80%, )
    // sratus_count = 4 : System Active Mode    (FAN 100%, )

    // Switch Detect
    if(HAL_GPIO_ReadPin(FAN_SW_GPIO_Port, FAN_SW_Pin) == 0)
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <readSwitchStatus+0xa8>)
 8000552:	2101      	movs	r1, #1
 8000554:	0018      	movs	r0, r3
 8000556:	f001 fbdf 	bl	8001d18 <HAL_GPIO_ReadPin>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d10d      	bne.n	800057a <readSwitchStatus+0x3a>
    {
        // Switch Detect Time Count
        while(HAL_GPIO_ReadPin(FAN_SW_GPIO_Port, FAN_SW_Pin) == 0)
 800055e:	e005      	b.n	800056c <readSwitchStatus+0x2c>
        {
            time_count++;
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	3301      	adds	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
            HAL_Delay(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 fdcc 	bl	8001104 <HAL_Delay>
        while(HAL_GPIO_ReadPin(FAN_SW_GPIO_Port, FAN_SW_Pin) == 0)
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <readSwitchStatus+0xa8>)
 800056e:	2101      	movs	r1, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fbd1 	bl	8001d18 <HAL_GPIO_ReadPin>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d0f2      	beq.n	8000560 <readSwitchStatus+0x20>
        }
    }

    // Switch Detect Time Check
    // System Mode Cheange Detect
    if(time_count >= 15)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	2b0e      	cmp	r3, #14
 800057e:	dd0b      	ble.n	8000598 <readSwitchStatus+0x58>
    {
        // if System StandBy Status
        if(*status_count == 0)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d103      	bne.n	8000590 <readSwitchStatus+0x50>
        {
            *status_count = 1; // Mode Change
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2201      	movs	r2, #1
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	e01a      	b.n	80005c6 <readSwitchStatus+0x86>
        }
        // System Active Status
        else
        {
            *status_count = 0; // Mode Change
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	e016      	b.n	80005c6 <readSwitchStatus+0x86>
        }
    }
    // System Status Cheange Detect
    else if((time_count < 20) && (time_count > 0) && (*status_count > 0))
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	2b13      	cmp	r3, #19
 800059c:	dc13      	bgt.n	80005c6 <readSwitchStatus+0x86>
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd10      	ble.n	80005c6 <readSwitchStatus+0x86>
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	dd0c      	ble.n	80005c6 <readSwitchStatus+0x86>
    {
        if(*status_count >= 4)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	dd03      	ble.n	80005bc <readSwitchStatus+0x7c>
        {
            *status_count = 2;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e004      	b.n	80005c6 <readSwitchStatus+0x86>
        }
        else
        {
            *status_count+=1;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	601a      	str	r2, [r3, #0]
    else
    {
        /* none */
    }

    if(*befor_mode != *status_count)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d006      	beq.n	80005e0 <readSwitchStatus+0xa0>
    {
    	*mode_change = true;
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
    	*befor_mode = *status_count;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
    }
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b006      	add	sp, #24
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	48001400 	.word	0x48001400

080005ec <fanControl>:

// FAN Control
void fanControl(int     * const status,
				bool	* const mode_status,
				bool	bat_status)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	701a      	strb	r2, [r3, #0]
    switch (*status)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d900      	bls.n	8000604 <fanControl+0x18>
 8000602:	e0a4      	b.n	800074e <fanControl+0x162>
 8000604:	009a      	lsls	r2, r3, #2
 8000606:	4b54      	ldr	r3, [pc, #336]	; (8000758 <fanControl+0x16c>)
 8000608:	18d3      	adds	r3, r2, r3
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	469f      	mov	pc, r3
    {
        case 0: // Device Off
        	if(bat_status == true) ledColor(color_none);
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <fanControl+0x30>
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff fe9e 	bl	8000358 <ledColor>
        	boostEnable(GPIO_PIN_RESET);
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff ff15 	bl	800044c <boostEnable>
        	HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_RESET);
 8000622:	2390      	movs	r3, #144	; 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fb91 	bl	8001d52 <HAL_GPIO_WritePin>
        	pwmDutySet(0);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff fdf5 	bl	8000220 <pwmDutySet>
        	if(*mode_status == true)
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d100      	bne.n	8000640 <fanControl+0x54>
 800063e:	e07f      	b.n	8000740 <fanControl+0x154>
        	{
        		buzzerControl(buzz_long, 1);
 8000640:	2101      	movs	r1, #1
 8000642:	2002      	movs	r0, #2
 8000644:	f7ff fe10 	bl	8000268 <buzzerControl>
        		*mode_status = false;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
        	}
        	break;
 800064e:	e077      	b.n	8000740 <fanControl+0x154>
        case 1: // Device Start
        	if(bat_status == true) ledColor(color_green);
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <fanControl+0x72>
 8000658:	2002      	movs	r0, #2
 800065a:	f7ff fe7d 	bl	8000358 <ledColor>
            if(*mode_status == true)
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <fanControl+0x88>
            {
                buzzerControl(buzz_long, 1);
 8000666:	2101      	movs	r1, #1
 8000668:	2002      	movs	r0, #2
 800066a:	f7ff fdfd 	bl	8000268 <buzzerControl>
                *mode_status = false;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
            }
            *status+=1;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	601a      	str	r2, [r3, #0]
            break;
 800067e:	e066      	b.n	800074e <fanControl+0x162>
        case 2: // PWM 30%
        	if(bat_status == true) ledColor(color_green);
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <fanControl+0xa2>
 8000688:	2002      	movs	r0, #2
 800068a:	f7ff fe65 	bl	8000358 <ledColor>
            boostEnable(GPIO_PIN_SET);
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fedc 	bl	800044c <boostEnable>
            HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_SET);
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2201      	movs	r2, #1
 800069a:	2120      	movs	r1, #32
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fb58 	bl	8001d52 <HAL_GPIO_WritePin>
            pwmDutySet(10);
 80006a2:	200a      	movs	r0, #10
 80006a4:	f7ff fdbc 	bl	8000220 <pwmDutySet>
//            pwmDutySet(45);
            if(*mode_status == true)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d049      	beq.n	8000744 <fanControl+0x158>
            {
            	buzzerControl(buzz_short, 1);
 80006b0:	2101      	movs	r1, #1
 80006b2:	2003      	movs	r0, #3
 80006b4:	f7ff fdd8 	bl	8000268 <buzzerControl>
            	*mode_status = false;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80006be:	e041      	b.n	8000744 <fanControl+0x158>
        case 3: // PWM 50%
        	if(bat_status == true) ledColor(color_green);
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <fanControl+0xe2>
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fe45 	bl	8000358 <ledColor>
            boostEnable(GPIO_PIN_SET);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff febc 	bl	800044c <boostEnable>
            HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_SET);
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2201      	movs	r2, #1
 80006da:	2120      	movs	r1, #32
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fb38 	bl	8001d52 <HAL_GPIO_WritePin>
            pwmDutySet(20);
 80006e2:	2014      	movs	r0, #20
 80006e4:	f7ff fd9c 	bl	8000220 <pwmDutySet>
//            pwmDutySet(65);
            if(*mode_status == true)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d02b      	beq.n	8000748 <fanControl+0x15c>
            {
            	buzzerControl(buzz_short, 2);
 80006f0:	2102      	movs	r1, #2
 80006f2:	2003      	movs	r0, #3
 80006f4:	f7ff fdb8 	bl	8000268 <buzzerControl>
            	*mode_status = false;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80006fe:	e023      	b.n	8000748 <fanControl+0x15c>
        case 4: // PWM 80%
        	if(bat_status == true) ledColor(color_green);
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <fanControl+0x122>
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fe25 	bl	8000358 <ledColor>
            boostEnable(GPIO_PIN_SET);
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff fe9c 	bl	800044c <boostEnable>
            HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_SET);
 8000714:	2390      	movs	r3, #144	; 0x90
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	2201      	movs	r2, #1
 800071a:	2120      	movs	r1, #32
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fb18 	bl	8001d52 <HAL_GPIO_WritePin>
            pwmDutySet(30);
 8000722:	201e      	movs	r0, #30
 8000724:	f7ff fd7c 	bl	8000220 <pwmDutySet>
//            pwmDutySet(85);
            if(*mode_status == true)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00d      	beq.n	800074c <fanControl+0x160>
            {
            	buzzerControl(buzz_short, 3);
 8000730:	2103      	movs	r1, #3
 8000732:	2003      	movs	r0, #3
 8000734:	f7ff fd98 	bl	8000268 <buzzerControl>
            	*mode_status = false;
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800073e:	e005      	b.n	800074c <fanControl+0x160>
        	break;
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	e004      	b.n	800074e <fanControl+0x162>
            break;
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	e002      	b.n	800074e <fanControl+0x162>
            break;
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	e000      	b.n	800074e <fanControl+0x162>
            break;
 800074c:	46c0      	nop			; (mov r8, r8)
    }
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	08003388 	.word	0x08003388

0800075c <ampControl>:

// Amp Control
void ampControl(const int status)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    if ((status == 0) || (status == 1))
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <ampControl+0x14>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d10a      	bne.n	8000786 <ampControl+0x2a>
    {
        HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOff);
 8000770:	2390      	movs	r3, #144	; 0x90
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2200      	movs	r2, #0
 8000776:	2120      	movs	r1, #32
 8000778:	0018      	movs	r0, r3
 800077a:	f001 faea 	bl	8001d52 <HAL_GPIO_WritePin>
        ampModeCount = 0;
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <ampControl+0xb4>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e040      	b.n	8000808 <ampControl+0xac>
    }
    else if (status > 1)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b01      	cmp	r3, #1
 800078a:	dd32      	ble.n	80007f2 <ampControl+0x96>
    {
        if (HAL_GPIO_ReadPin(AMP_SW_GPIO_Port, AMP_SW_Pin) == 0)
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <ampControl+0xb8>)
 800078e:	2101      	movs	r1, #1
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fac1 	bl	8001d18 <HAL_GPIO_ReadPin>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d114      	bne.n	80007c4 <ampControl+0x68>
        {
            while (HAL_GPIO_ReadPin(AMP_SW_GPIO_Port, AMP_SW_Pin) == 0);
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <ampControl+0xb8>)
 800079e:	2101      	movs	r1, #1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fab9 	bl	8001d18 <HAL_GPIO_ReadPin>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d0f8      	beq.n	800079c <ampControl+0x40>
            ampModeCount++;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <ampControl+0xb4>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <ampControl+0xb4>)
 80007b4:	701a      	strb	r2, [r3, #0]
            if (ampModeCount >= 2) ampModeCount = 0;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <ampControl+0xb4>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d902      	bls.n	80007c4 <ampControl+0x68>
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <ampControl+0xb4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
        }

        switch (ampModeCount)
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <ampControl+0xb4>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <ampControl+0x76>
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d008      	beq.n	80007e2 <ampControl+0x86>
    else
    {
        HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOff);
        ampModeCount = 0;
    }
}
 80007d0:	e01a      	b.n	8000808 <ampControl+0xac>
                HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOff);
 80007d2:	2390      	movs	r3, #144	; 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fab9 	bl	8001d52 <HAL_GPIO_WritePin>
                break;
 80007e0:	e012      	b.n	8000808 <ampControl+0xac>
                HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOn);
 80007e2:	2390      	movs	r3, #144	; 0x90
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	2201      	movs	r2, #1
 80007e8:	2120      	movs	r1, #32
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 fab1 	bl	8001d52 <HAL_GPIO_WritePin>
                break;
 80007f0:	e00a      	b.n	8000808 <ampControl+0xac>
        HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOff);
 80007f2:	2390      	movs	r3, #144	; 0x90
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 faa9 	bl	8001d52 <HAL_GPIO_WritePin>
        ampModeCount = 0;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <ampControl+0xb4>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
}
 8000806:	e7ff      	b.n	8000808 <ampControl+0xac>
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000fc 	.word	0x200000fc
 8000814:	48000400 	.word	0x48000400

08000818 <chargeDetect>:

// Charge Detect
void chargeDetect(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    voltIn = HAL_GPIO_ReadPin(VBUS_DET_GPIO_Port, VBUS_DET_Pin);
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <chargeDetect+0x68>)
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fa79 	bl	8001d18 <HAL_GPIO_ReadPin>
 8000826:	0003      	movs	r3, r0
 8000828:	001a      	movs	r2, r3
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <chargeDetect+0x6c>)
 800082c:	701a      	strb	r2, [r3, #0]
    chgStat = HAL_GPIO_ReadPin(CHG_STAT_GPIO_Port, CHG_STAT_Pin);
 800082e:	2390      	movs	r3, #144	; 0x90
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	2101      	movs	r1, #1
 8000834:	0018      	movs	r0, r3
 8000836:	f001 fa6f 	bl	8001d18 <HAL_GPIO_ReadPin>
 800083a:	0003      	movs	r3, r0
 800083c:	001a      	movs	r2, r3
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <chargeDetect+0x70>)
 8000840:	701a      	strb	r2, [r3, #0]

    if(voltIn == 1)
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <chargeDetect+0x6c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d111      	bne.n	800086e <chargeDetect+0x56>
    {
        if (chgStat == 0)
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <chargeDetect+0x70>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d106      	bne.n	8000860 <chargeDetect+0x48>
        {
            HAL_GPIO_WritePin(LED_CHG_GPIO_Port, LED_CHG_Pin, GPIO_PIN_SET);
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <chargeDetect+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	2102      	movs	r1, #2
 8000858:	0018      	movs	r0, r3
 800085a:	f001 fa7a 	bl	8001d52 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(LED_CHG_GPIO_Port,LED_CHG_Pin,GPIO_PIN_RESET);
    }
}
 800085e:	e00c      	b.n	800087a <chargeDetect+0x62>
            HAL_GPIO_WritePin(LED_CHG_GPIO_Port, LED_CHG_Pin, GPIO_PIN_RESET);
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <chargeDetect+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	0018      	movs	r0, r3
 8000868:	f001 fa73 	bl	8001d52 <HAL_GPIO_WritePin>
}
 800086c:	e005      	b.n	800087a <chargeDetect+0x62>
        HAL_GPIO_WritePin(LED_CHG_GPIO_Port,LED_CHG_Pin,GPIO_PIN_RESET);
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <chargeDetect+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	2102      	movs	r1, #2
 8000874:	0018      	movs	r0, r3
 8000876:	f001 fa6c 	bl	8001d52 <HAL_GPIO_WritePin>
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	48000400 	.word	0x48000400
 8000884:	200000fd 	.word	0x200000fd
 8000888:	20000000 	.word	0x20000000
 800088c:	48001400 	.word	0x48001400

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b5b0      	push	{r4, r5, r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int system_status = 0; // System Status Variable
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  bool mode_status = false;
 800089a:	230b      	movs	r3, #11
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
  int befor_mode = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  int adc_read_count = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  bool bat_status = true; // true: normal, false: low Bat
 80008aa:	2313      	movs	r3, #19
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b2:	f000 fbc3 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b6:	f000 f849 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ba:	f000 f9af 	bl	8000c1c <MX_GPIO_Init>
  MX_TIM3_Init();
 80008be:	f000 f8e1 	bl	8000a84 <MX_TIM3_Init>
  MX_TIM14_Init();
 80008c2:	f000 f95d 	bl	8000b80 <MX_TIM14_Init>
  MX_ADC_Init();
 80008c6:	f000 f881 	bl	80009cc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  deviceInit(); // Device Initial
 80008ca:	f7ff fdd1 	bl	8000470 <deviceInit>
  HAL_Delay(50);
 80008ce:	2032      	movs	r0, #50	; 0x32
 80008d0:	f000 fc18 	bl	8001104 <HAL_Delay>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    	chargeDetect();
 80008d4:	f7ff ffa0 	bl	8000818 <chargeDetect>
    	adc_read_count++;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3301      	adds	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
    	if(adc_read_count >= 5000)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <main+0xb8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	dd14      	ble.n	8000910 <main+0x80>
    	{
    		if(adcRead() < low_vol)
 80008e6:	f7ff fd19 	bl	800031c <adcRead>
 80008ea:	0002      	movs	r2, r0
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <main+0x74>
    		{
    			bat_status = false;
 80008f4:	2313      	movs	r3, #19
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
    			ledColor(color_magenta);
 80008fc:	2005      	movs	r0, #5
 80008fe:	f7ff fd2b 	bl	8000358 <ledColor>
 8000902:	e003      	b.n	800090c <main+0x7c>
    		}
    		else bat_status = true;
 8000904:	2313      	movs	r3, #19
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
    		adc_read_count = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
    	}
        readSwitchStatus(&system_status,
 8000910:	1d3a      	adds	r2, r7, #4
 8000912:	250b      	movs	r5, #11
 8000914:	1979      	adds	r1, r7, r5
 8000916:	240c      	movs	r4, #12
 8000918:	193b      	adds	r3, r7, r4
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff fe10 	bl	8000540 <readSwitchStatus>
        				 &mode_status,
						 &befor_mode);
        fanControl(&system_status, &mode_status, bat_status);
 8000920:	2313      	movs	r3, #19
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	1979      	adds	r1, r7, r5
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fe5e 	bl	80005ec <fanControl>
        ampControl(&system_status);
 8000930:	193b      	adds	r3, r7, r4
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff ff12 	bl	800075c <ampControl>
    	boostEnable(GPIO_PIN_SET);
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fd87 	bl	800044c <boostEnable>
    	HAL_Delay(1);
 800093e:	2001      	movs	r0, #1
 8000940:	f000 fbe0 	bl	8001104 <HAL_Delay>
    	chargeDetect();
 8000944:	e7c6      	b.n	80008d4 <main+0x44>
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	00001387 	.word	0x00001387

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b091      	sub	sp, #68	; 0x44
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	2410      	movs	r4, #16
 8000954:	193b      	adds	r3, r7, r4
 8000956:	0018      	movs	r0, r3
 8000958:	2330      	movs	r3, #48	; 0x30
 800095a:	001a      	movs	r2, r3
 800095c:	2100      	movs	r1, #0
 800095e:	f002 fcdf 	bl	8003320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000962:	003b      	movs	r3, r7
 8000964:	0018      	movs	r0, r3
 8000966:	2310      	movs	r3, #16
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f002 fcd8 	bl	8003320 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	0021      	movs	r1, r4
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2202      	movs	r2, #2
 8000976:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2201      	movs	r2, #1
 800097c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2210      	movs	r2, #16
 8000982:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	187b      	adds	r3, r7, r1
 800098c:	0018      	movs	r0, r3
 800098e:	f001 f9fd 	bl	8001d8c <HAL_RCC_OscConfig>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000996:	f000 f9fb 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	003b      	movs	r3, r7
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a0:	003b      	movs	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	003b      	movs	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	003b      	movs	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b2:	003b      	movs	r3, r7
 80009b4:	2100      	movs	r1, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 fd02 	bl	80023c0 <HAL_RCC_ClockConfig>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009c0:	f000 f9e6 	bl	8000d90 <Error_Handler>
  }
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b011      	add	sp, #68	; 0x44
 80009ca:	bd90      	pop	{r4, r7, pc}

080009cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	0018      	movs	r0, r3
 80009d6:	230c      	movs	r3, #12
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f002 fca0 	bl	8003320 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <MX_ADC_Init+0xb0>)
 80009e2:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <MX_ADC_Init+0xb4>)
 80009e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_ADC_Init+0xb0>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	0612      	lsls	r2, r2, #24
 80009ec:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <MX_ADC_Init+0xb0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_ADC_Init+0xb0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_ADC_Init+0xb0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a02:	2204      	movs	r2, #4
 8000a04:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a20:	22c2      	movs	r2, #194	; 0xc2
 8000a22:	32ff      	adds	r2, #255	; 0xff
 8000a24:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a2e:	2224      	movs	r2, #36	; 0x24
 8000a30:	2100      	movs	r1, #0
 8000a32:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fb85 	bl	800114c <HAL_ADC_Init>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8000a46:	f000 f9a3 	bl	8000d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	0152      	lsls	r2, r2, #5
 8000a56:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	0552      	lsls	r2, r2, #21
 8000a5e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a60:	1d3a      	adds	r2, r7, #4
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_ADC_Init+0xb0>)
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fda8 	bl	80015bc <HAL_ADC_ConfigChannel>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 8000a70:	f000 f98e 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b004      	add	sp, #16
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000002c 	.word	0x2000002c
 8000a80:	40012400 	.word	0x40012400

08000a84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	2328      	movs	r3, #40	; 0x28
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2310      	movs	r3, #16
 8000a92:	001a      	movs	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f002 fc43 	bl	8003320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f002 fc3b 	bl	8003320 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	0018      	movs	r0, r3
 8000aae:	231c      	movs	r3, #28
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f002 fc34 	bl	8003320 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000aba:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <MX_TIM3_Init+0xf8>)
 8000abc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000ac0:	2209      	movs	r2, #9
 8000ac2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 251;
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000acc:	22fb      	movs	r2, #251	; 0xfb
 8000ace:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 fda0 	bl	8002624 <HAL_TIM_Base_Init>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ae8:	f000 f952 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aec:	2128      	movs	r1, #40	; 0x28
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	0152      	lsls	r2, r2, #5
 8000af4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000af6:	187a      	adds	r2, r7, r1
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 ffab 	bl	8002a58 <HAL_TIM_ConfigClockSource>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b06:	f000 f943 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 fdd9 	bl	80026c4 <HAL_TIM_PWM_Init>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b16:	f000 f93b 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b28:	187a      	adds	r2, r7, r1
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 fb7a 	bl	8003228 <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b38:	f000 f92a 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2260      	movs	r2, #96	; 0x60
 8000b40:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 125;
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	227d      	movs	r2, #125	; 0x7d
 8000b46:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	1d39      	adds	r1, r7, #4
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 feb6 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b64:	f000 f914 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <MX_TIM3_Init+0xf4>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 f9b4 	bl	8000ed8 <HAL_TIM_MspPostInit>

}
 8000b70:	46c0      	nop			; (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b00e      	add	sp, #56	; 0x38
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000006c 	.word	0x2000006c
 8000b7c:	40000400 	.word	0x40000400

08000b80 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	231c      	movs	r3, #28
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f002 fbc6 	bl	8003320 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000b96:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <MX_TIM14_Init+0x98>)
 8000b98:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 3;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000ba8:	2263      	movs	r2, #99	; 0x63
 8000baa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fd32 	bl	8002624 <HAL_TIM_Base_Init>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000bc4:	f000 f8e4 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 fd7a 	bl	80026c4 <HAL_TIM_PWM_Init>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f000 f8dc 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2260      	movs	r2, #96	; 0x60
 8000bdc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf0:	1d39      	adds	r1, r7, #4
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fe68 	bl	80028cc <HAL_TIM_PWM_ConfigChannel>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000c00:	f000 f8c6 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <MX_TIM14_Init+0x94>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f966 	bl	8000ed8 <HAL_TIM_MspPostInit>

}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b008      	add	sp, #32
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000b4 	.word	0x200000b4
 8000c18:	40002000 	.word	0x40002000

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	240c      	movs	r4, #12
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	0018      	movs	r0, r3
 8000c28:	2314      	movs	r3, #20
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f002 fb77 	bl	8003320 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c32:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c34:	695a      	ldr	r2, [r3, #20]
 8000c36:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	03c9      	lsls	r1, r1, #15
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	03db      	lsls	r3, r3, #15
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b4d      	ldr	r3, [pc, #308]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c50:	695a      	ldr	r2, [r3, #20]
 8000c52:	4b4c      	ldr	r3, [pc, #304]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0289      	lsls	r1, r1, #10
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	4b49      	ldr	r3, [pc, #292]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c5e:	695a      	ldr	r2, [r3, #20]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	4013      	ands	r3, r2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b46      	ldr	r3, [pc, #280]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	02c9      	lsls	r1, r1, #11
 8000c74:	430a      	orrs	r2, r1
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	02db      	lsls	r3, r3, #11
 8000c80:	4013      	ands	r3, r2
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CHG_GPIO_Port, LED_CHG_Pin, GPIO_PIN_RESET);
 8000c86:	4b40      	ldr	r3, [pc, #256]	; (8000d88 <MX_GPIO_Init+0x16c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f001 f860 	bl	8001d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_SET);
 8000c92:	2390      	movs	r3, #144	; 0x90
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2201      	movs	r2, #1
 8000c98:	2120      	movs	r1, #32
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f001 f859 	bl	8001d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BST_EN_Pin|LED_G_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000ca0:	23e8      	movs	r3, #232	; 0xe8
 8000ca2:	00d9      	lsls	r1, r3, #3
 8000ca4:	2390      	movs	r3, #144	; 0x90
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	2200      	movs	r2, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f001 f851 	bl	8001d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FAN_SW_Pin */
  GPIO_InitStruct.Pin = FAN_SW_Pin;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FAN_SW_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <MX_GPIO_Init+0x16c>)
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	0010      	movs	r0, r2
 8000cca:	f000 febd 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CHG_Pin */
  GPIO_InitStruct.Pin = LED_CHG_Pin;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_CHG_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <MX_GPIO_Init+0x16c>)
 8000cea:	0019      	movs	r1, r3
 8000cec:	0010      	movs	r0, r2
 8000cee:	f000 feab 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_STAT_Pin */
  GPIO_InitStruct.Pin = CHG_STAT_Pin;
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	2201      	movs	r2, #1
 8000d02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHG_STAT_GPIO_Port, &GPIO_InitStruct);
 8000d04:	193a      	adds	r2, r7, r4
 8000d06:	2390      	movs	r3, #144	; 0x90
 8000d08:	05db      	lsls	r3, r3, #23
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 fe9b 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_SD_Pin BST_EN_Pin LED_G_Pin LED_R_Pin
                           LED_B_Pin */
  GPIO_InitStruct.Pin = AMP_SD_Pin|BST_EN_Pin|LED_G_Pin|LED_R_Pin
 8000d12:	0021      	movs	r1, r4
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	22ec      	movs	r2, #236	; 0xec
 8000d18:	00d2      	lsls	r2, r2, #3
 8000d1a:	601a      	str	r2, [r3, #0]
                          |LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	000c      	movs	r4, r1
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	2201      	movs	r2, #1
 8000d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	193a      	adds	r2, r7, r4
 8000d32:	2390      	movs	r3, #144	; 0x90
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fe85 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_SW_Pin */
  GPIO_InitStruct.Pin = AMP_SW_Pin;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMP_SW_GPIO_Port, &GPIO_InitStruct);
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <MX_GPIO_Init+0x170>)
 8000d54:	0019      	movs	r1, r3
 8000d56:	0010      	movs	r0, r2
 8000d58:	f000 fe76 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 8000d5c:	0021      	movs	r1, r4
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <MX_GPIO_Init+0x170>)
 8000d74:	0019      	movs	r1, r3
 8000d76:	0010      	movs	r0, r2
 8000d78:	f000 fe66 	bl	8001a48 <HAL_GPIO_Init>

}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b009      	add	sp, #36	; 0x24
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48001400 	.word	0x48001400
 8000d8c:	48000400 	.word	0x48000400

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_MspInit+0x44>)
 8000da4:	699a      	ldr	r2, [r3, #24]
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_MspInit+0x44>)
 8000da8:	2101      	movs	r1, #1
 8000daa:	430a      	orrs	r2, r1
 8000dac:	619a      	str	r2, [r3, #24]
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_MspInit+0x44>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x44>)
 8000dbc:	69da      	ldr	r2, [r3, #28]
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	0549      	lsls	r1, r1, #21
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	61da      	str	r2, [r3, #28]
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_MspInit+0x44>)
 8000dca:	69da      	ldr	r2, [r3, #28]
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	055b      	lsls	r3, r3, #21
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b08b      	sub	sp, #44	; 0x2c
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	2414      	movs	r4, #20
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	0018      	movs	r0, r3
 8000df2:	2314      	movs	r3, #20
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f002 fa92 	bl	8003320 <memset>
  if(hadc->Instance==ADC1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_ADC_MspInit+0x84>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12b      	bne.n	8000e5e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e08:	699a      	ldr	r2, [r3, #24]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0089      	lsls	r1, r1, #2
 8000e10:	430a      	orrs	r2, r1
 8000e12:	619a      	str	r2, [r3, #24]
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e16:	699a      	ldr	r2, [r3, #24]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0289      	lsls	r1, r1, #10
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_ADC_MspInit+0x88>)
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = VBAT_DET_Pin;
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	2203      	movs	r2, #3
 8000e48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_DET_GPIO_Port, &GPIO_InitStruct);
 8000e50:	193a      	adds	r2, r7, r4
 8000e52:	2390      	movs	r3, #144	; 0x90
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 fdf5 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b00b      	add	sp, #44	; 0x2c
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40012400 	.word	0x40012400
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <HAL_TIM_Base_MspInit+0x5c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10c      	bne.n	8000e9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_TIM_Base_MspInit+0x60>)
 8000e84:	69da      	ldr	r2, [r3, #28]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_TIM_Base_MspInit+0x60>)
 8000e88:	2102      	movs	r1, #2
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	61da      	str	r2, [r3, #28]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_TIM_Base_MspInit+0x60>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	2202      	movs	r2, #2
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e9a:	e012      	b.n	8000ec2 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM14)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_TIM_Base_MspInit+0x64>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10d      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_TIM_Base_MspInit+0x60>)
 8000ea8:	69da      	ldr	r2, [r3, #28]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_TIM_Base_MspInit+0x60>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0049      	lsls	r1, r1, #1
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	61da      	str	r2, [r3, #28]
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_TIM_Base_MspInit+0x60>)
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b004      	add	sp, #16
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40002000 	.word	0x40002000

08000ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08b      	sub	sp, #44	; 0x2c
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	2414      	movs	r4, #20
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	2314      	movs	r3, #20
 8000ee8:	001a      	movs	r2, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	f002 fa18 	bl	8003320 <memset>
  if(htim->Instance==TIM3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2a      	ldr	r2, [pc, #168]	; (8000fa0 <HAL_TIM_MspPostInit+0xc8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d124      	bne.n	8000f44 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_TIM_MspPostInit+0xcc>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <HAL_TIM_MspPostInit+0xcc>)
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	02c9      	lsls	r1, r1, #11
 8000f04:	430a      	orrs	r2, r1
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <HAL_TIM_MspPostInit+0xcc>)
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	02db      	lsls	r3, r3, #11
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f16:	0021      	movs	r1, r4
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2202      	movs	r2, #2
 8000f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2201      	movs	r2, #1
 8000f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_TIM_MspPostInit+0xd0>)
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	f000 fd83 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000f42:	e028      	b.n	8000f96 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM14)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_TIM_MspPostInit+0xd4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d123      	bne.n	8000f96 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_TIM_MspPostInit+0xcc>)
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_TIM_MspPostInit+0xcc>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	02c9      	lsls	r1, r1, #11
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	615a      	str	r2, [r3, #20]
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_TIM_MspPostInit+0xcc>)
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	02db      	lsls	r3, r3, #11
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f6a:	2114      	movs	r1, #20
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2202      	movs	r2, #2
 8000f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2202      	movs	r2, #2
 8000f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_TIM_MspPostInit+0xd0>)
 8000f8e:	0019      	movs	r1, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	f000 fd59 	bl	8001a48 <HAL_GPIO_Init>
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b00b      	add	sp, #44	; 0x2c
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40000400 	.word	0x40000400
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	40002000 	.word	0x40002000

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f87a 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001012:	f7ff ffe4 	bl	8000fde <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001016:	f002 f95f 	bl	80032d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101a:	f7ff fc39 	bl	8000890 <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   r0, =_estack
 8001020:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800102c:	080033b4 	.word	0x080033b4
  ldr r2, =_sbss
 8001030:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001034:	20000104 	.word	0x20000104

08001038 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_IRQHandler>
	...

0800103c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_Init+0x24>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_Init+0x24>)
 8001046:	2110      	movs	r1, #16
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f809 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001052:	f7ff fea3 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_InitTick+0x5c>)
 800106e:	681c      	ldr	r4, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x60>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	0019      	movs	r1, r3
 8001076:	23fa      	movs	r3, #250	; 0xfa
 8001078:	0098      	lsls	r0, r3, #2
 800107a:	f7ff f845 	bl	8000108 <__udivsi3>
 800107e:	0003      	movs	r3, r0
 8001080:	0019      	movs	r1, r3
 8001082:	0020      	movs	r0, r4
 8001084:	f7ff f840 	bl	8000108 <__udivsi3>
 8001088:	0003      	movs	r3, r0
 800108a:	0018      	movs	r0, r3
 800108c:	f000 fccf 	bl	8001a2e <HAL_SYSTICK_Config>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d001      	beq.n	8001098 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e00f      	b.n	80010b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d80b      	bhi.n	80010b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	2301      	movs	r3, #1
 80010a2:	425b      	negs	r3, r3
 80010a4:	2200      	movs	r2, #0
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 fcac 	bl	8001a04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_InitTick+0x64>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b003      	add	sp, #12
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	20000004 	.word	0x20000004
 80010c4:	2000000c 	.word	0x2000000c
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x1c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	001a      	movs	r2, r3
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x20>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	18d2      	adds	r2, r2, r3
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_IncTick+0x20>)
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	20000100 	.word	0x20000100

080010f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <HAL_GetTick+0x10>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	20000100 	.word	0x20000100

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff fff0 	bl	80010f0 <HAL_GetTick>
 8001110:	0003      	movs	r3, r0
 8001112:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3301      	adds	r3, #1
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	001a      	movs	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	189b      	adds	r3, r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	f7ff ffe0 	bl	80010f0 <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b004      	add	sp, #16
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	2000000c 	.word	0x2000000c

0800114c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e125      	b.n	80013b6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10a      	bne.n	8001188 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2234      	movs	r2, #52	; 0x34
 800117c:	2100      	movs	r1, #0
 800117e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff fe2e 	bl	8000de4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118c:	2210      	movs	r2, #16
 800118e:	4013      	ands	r3, r2
 8001190:	d000      	beq.n	8001194 <HAL_ADC_Init+0x48>
 8001192:	e103      	b.n	800139c <HAL_ADC_Init+0x250>
 8001194:	230f      	movs	r3, #15
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d000      	beq.n	80011a0 <HAL_ADC_Init+0x54>
 800119e:	e0fd      	b.n	800139c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80011aa:	d000      	beq.n	80011ae <HAL_ADC_Init+0x62>
 80011ac:	e0f6      	b.n	800139c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b2:	4a83      	ldr	r2, [pc, #524]	; (80013c0 <HAL_ADC_Init+0x274>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	2202      	movs	r2, #2
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2203      	movs	r2, #3
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d112      	bne.n	80011f2 <HAL_ADC_Init+0xa6>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d009      	beq.n	80011ee <HAL_ADC_Init+0xa2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	401a      	ands	r2, r3
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_Init+0xa6>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_ADC_Init+0xa8>
 80011f2:	2300      	movs	r3, #0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d116      	bne.n	8001226 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2218      	movs	r2, #24
 8001200:	4393      	bics	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	0899      	lsrs	r1, r3, #2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4964      	ldr	r1, [pc, #400]	; (80013c4 <HAL_ADC_Init+0x278>)
 8001232:	400a      	ands	r2, r1
 8001234:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7e1b      	ldrb	r3, [r3, #24]
 800123a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7e5b      	ldrb	r3, [r3, #25]
 8001240:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001242:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e9b      	ldrb	r3, [r3, #26]
 8001248:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800124a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2b01      	cmp	r3, #1
 8001252:	d002      	beq.n	800125a <HAL_ADC_Init+0x10e>
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	e000      	b.n	800125c <HAL_ADC_Init+0x110>
 800125a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800125c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001262:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d101      	bne.n	8001270 <HAL_ADC_Init+0x124>
 800126c:	2304      	movs	r3, #4
 800126e:	e000      	b.n	8001272 <HAL_ADC_Init+0x126>
 8001270:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001272:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2124      	movs	r1, #36	; 0x24
 8001278:	5c5b      	ldrb	r3, [r3, r1]
 800127a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800127c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	4313      	orrs	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d115      	bne.n	80012b8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e9b      	ldrb	r3, [r3, #26]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	0252      	lsls	r2, r2, #9
 800129a:	4313      	orrs	r3, r2
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	e00b      	b.n	80012b8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	2220      	movs	r2, #32
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b0:	2201      	movs	r2, #1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	23c2      	movs	r3, #194	; 0xc2
 80012be:	33ff      	adds	r3, #255	; 0xff
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d007      	beq.n	80012d4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80012cc:	4313      	orrs	r3, r2
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68d9      	ldr	r1, [r3, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	055b      	lsls	r3, r3, #21
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d01b      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d017      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d013      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	2b03      	cmp	r3, #3
 8001306:	d00f      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	2b04      	cmp	r3, #4
 800130e:	d00b      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	2b05      	cmp	r3, #5
 8001316:	d007      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	2b06      	cmp	r3, #6
 800131e:	d003      	beq.n	8001328 <HAL_ADC_Init+0x1dc>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	2b07      	cmp	r3, #7
 8001326:	d112      	bne.n	800134e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2107      	movs	r1, #7
 8001334:	438a      	bics	r2, r1
 8001336:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6959      	ldr	r1, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	2207      	movs	r2, #7
 8001344:	401a      	ands	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_ADC_Init+0x27c>)
 8001356:	4013      	ands	r3, r2
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	429a      	cmp	r2, r3
 800135c:	d10b      	bne.n	8001376 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	2203      	movs	r2, #3
 800136a:	4393      	bics	r3, r2
 800136c:	2201      	movs	r2, #1
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001374:	e01c      	b.n	80013b0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	2212      	movs	r2, #18
 800137c:	4393      	bics	r3, r2
 800137e:	2210      	movs	r2, #16
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138a:	2201      	movs	r2, #1
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800139a:	e009      	b.n	80013b0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a0:	2210      	movs	r2, #16
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	fffffefd 	.word	0xfffffefd
 80013c4:	fffe0219 	.word	0xfffe0219
 80013c8:	833fffe7 	.word	0x833fffe7

080013cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d4:	230f      	movs	r3, #15
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d138      	bne.n	800145a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2234      	movs	r2, #52	; 0x34
 80013ec:	5c9b      	ldrb	r3, [r3, r2]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Start+0x2a>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e038      	b.n	8001468 <HAL_ADC_Start+0x9c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2234      	movs	r2, #52	; 0x34
 80013fa:	2101      	movs	r1, #1
 80013fc:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7e5b      	ldrb	r3, [r3, #25]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d007      	beq.n	8001416 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001406:	230f      	movs	r3, #15
 8001408:	18fc      	adds	r4, r7, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0018      	movs	r0, r3
 800140e:	f000 f9e3 	bl	80017d8 <ADC_Enable>
 8001412:	0003      	movs	r3, r0
 8001414:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001416:	230f      	movs	r3, #15
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d120      	bne.n	8001462 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_ADC_Start+0xa4>)
 8001426:	4013      	ands	r3, r2
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	0052      	lsls	r2, r2, #1
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2234      	movs	r2, #52	; 0x34
 800143c:	2100      	movs	r1, #0
 800143e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	221c      	movs	r2, #28
 8001446:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2104      	movs	r1, #4
 8001454:	430a      	orrs	r2, r1
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e003      	b.n	8001462 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800145a:	230f      	movs	r3, #15
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2202      	movs	r2, #2
 8001460:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001462:	230f      	movs	r3, #15
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	781b      	ldrb	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b005      	add	sp, #20
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	fffff0fe 	.word	0xfffff0fe

08001474 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b08      	cmp	r3, #8
 8001484:	d102      	bne.n	800148c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001486:	2308      	movs	r3, #8
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e014      	b.n	80014b6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	4013      	ands	r3, r2
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10b      	bne.n	80014b2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149e:	2220      	movs	r2, #32
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2234      	movs	r2, #52	; 0x34
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e071      	b.n	8001596 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014b2:	230c      	movs	r3, #12
 80014b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014b6:	f7ff fe1b 	bl	80010f0 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014be:	e01f      	b.n	8001500 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	d01c      	beq.n	8001500 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d007      	beq.n	80014dc <HAL_ADC_PollForConversion+0x68>
 80014cc:	f7ff fe10 	bl	80010f0 <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d211      	bcs.n	8001500 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	d10b      	bne.n	8001500 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ec:	2204      	movs	r2, #4
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2234      	movs	r2, #52	; 0x34
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e04a      	b.n	8001596 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	d0d9      	beq.n	80014c0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	23c0      	movs	r3, #192	; 0xc0
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4013      	ands	r3, r2
 8001526:	d12d      	bne.n	8001584 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800152c:	2b00      	cmp	r3, #0
 800152e:	d129      	bne.n	8001584 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2208      	movs	r2, #8
 8001538:	4013      	ands	r3, r2
 800153a:	2b08      	cmp	r3, #8
 800153c:	d122      	bne.n	8001584 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2204      	movs	r2, #4
 8001546:	4013      	ands	r3, r2
 8001548:	d110      	bne.n	800156c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	210c      	movs	r1, #12
 8001556:	438a      	bics	r2, r1
 8001558:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_ADC_PollForConversion+0x12c>)
 8001560:	4013      	ands	r3, r2
 8001562:	2201      	movs	r2, #1
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
 800156a:	e00b      	b.n	8001584 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001570:	2220      	movs	r2, #32
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	2201      	movs	r2, #1
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7e1b      	ldrb	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	220c      	movs	r2, #12
 8001592:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b004      	add	sp, #16
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	fffffefe 	.word	0xfffffefe

080015a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015b2:	0018      	movs	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c6:	230f      	movs	r3, #15
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	055b      	lsls	r3, r3, #21
 80015da:	429a      	cmp	r2, r3
 80015dc:	d011      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x46>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d00d      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x46>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d009      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x46>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d005      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x46>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d001      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x46>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2234      	movs	r2, #52	; 0x34
 8001606:	5c9b      	ldrb	r3, [r3, r2]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x54>
 800160c:	2302      	movs	r3, #2
 800160e:	e0d0      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1f6>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2234      	movs	r2, #52	; 0x34
 8001614:	2101      	movs	r1, #1
 8001616:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
 8001622:	d000      	beq.n	8001626 <HAL_ADC_ConfigChannel+0x6a>
 8001624:	e0b4      	b.n	8001790 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4a64      	ldr	r2, [pc, #400]	; (80017bc <HAL_ADC_ConfigChannel+0x200>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d100      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x76>
 8001630:	e082      	b.n	8001738 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2201      	movs	r2, #1
 800163e:	409a      	lsls	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	055b      	lsls	r3, r3, #21
 8001650:	429a      	cmp	r2, r3
 8001652:	d037      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d033      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2b02      	cmp	r3, #2
 8001662:	d02f      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	2b03      	cmp	r3, #3
 800166a:	d02b      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	2b04      	cmp	r3, #4
 8001672:	d027      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	2b05      	cmp	r3, #5
 800167a:	d023      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	2b06      	cmp	r3, #6
 8001682:	d01f      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	2b07      	cmp	r3, #7
 800168a:	d01b      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2107      	movs	r1, #7
 8001698:	400b      	ands	r3, r1
 800169a:	429a      	cmp	r2, r3
 800169c:	d012      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2107      	movs	r1, #7
 80016aa:	438a      	bics	r2, r1
 80016ac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6959      	ldr	r1, [r3, #20]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2207      	movs	r2, #7
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d007      	beq.n	80016dc <HAL_ADC_ConfigChannel+0x120>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b11      	cmp	r3, #17
 80016d2:	d003      	beq.n	80016dc <HAL_ADC_ConfigChannel+0x120>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b12      	cmp	r3, #18
 80016da:	d163      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016dc:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <HAL_ADC_ConfigChannel+0x204>)
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d009      	beq.n	80016fc <HAL_ADC_ConfigChannel+0x140>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b11      	cmp	r3, #17
 80016ee:	d102      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x13a>
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	03db      	lsls	r3, r3, #15
 80016f4:	e004      	b.n	8001700 <HAL_ADC_ConfigChannel+0x144>
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	045b      	lsls	r3, r3, #17
 80016fa:	e001      	b.n	8001700 <HAL_ADC_ConfigChannel+0x144>
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	4a2f      	ldr	r2, [pc, #188]	; (80017c0 <HAL_ADC_ConfigChannel+0x204>)
 8001702:	430b      	orrs	r3, r1
 8001704:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b10      	cmp	r3, #16
 800170c:	d14a      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_ADC_ConfigChannel+0x208>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	492d      	ldr	r1, [pc, #180]	; (80017c8 <HAL_ADC_ConfigChannel+0x20c>)
 8001714:	0018      	movs	r0, r3
 8001716:	f7fe fcf7 	bl	8000108 <__udivsi3>
 800171a:	0003      	movs	r3, r0
 800171c:	001a      	movs	r2, r3
 800171e:	0013      	movs	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	189b      	adds	r3, r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001728:	e002      	b.n	8001730 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	3b01      	subs	r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f9      	bne.n	800172a <HAL_ADC_ConfigChannel+0x16e>
 8001736:	e035      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2101      	movs	r1, #1
 8001744:	4099      	lsls	r1, r3
 8001746:	000b      	movs	r3, r1
 8001748:	43d9      	mvns	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	400a      	ands	r2, r1
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b10      	cmp	r3, #16
 8001758:	d007      	beq.n	800176a <HAL_ADC_ConfigChannel+0x1ae>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b11      	cmp	r3, #17
 8001760:	d003      	beq.n	800176a <HAL_ADC_ConfigChannel+0x1ae>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b12      	cmp	r3, #18
 8001768:	d11c      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_ADC_ConfigChannel+0x204>)
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d007      	beq.n	8001786 <HAL_ADC_ConfigChannel+0x1ca>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b11      	cmp	r3, #17
 800177c:	d101      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x1c6>
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_ADC_ConfigChannel+0x210>)
 8001780:	e002      	b.n	8001788 <HAL_ADC_ConfigChannel+0x1cc>
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_ADC_ConfigChannel+0x214>)
 8001784:	e000      	b.n	8001788 <HAL_ADC_ConfigChannel+0x1cc>
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_ADC_ConfigChannel+0x218>)
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_ADC_ConfigChannel+0x204>)
 800178a:	400b      	ands	r3, r1
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e009      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	2220      	movs	r2, #32
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800179c:	230f      	movs	r3, #15
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2234      	movs	r2, #52	; 0x34
 80017a8:	2100      	movs	r1, #0
 80017aa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80017ac:	230f      	movs	r3, #15
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	781b      	ldrb	r3, [r3, #0]
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	00001001 	.word	0x00001001
 80017c0:	40012708 	.word	0x40012708
 80017c4:	20000004 	.word	0x20000004
 80017c8:	000f4240 	.word	0x000f4240
 80017cc:	ffbfffff 	.word	0xffbfffff
 80017d0:	feffffff 	.word	0xfeffffff
 80017d4:	ff7fffff 	.word	0xff7fffff

080017d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2203      	movs	r2, #3
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d112      	bne.n	800181c <ADC_Enable+0x44>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	2b01      	cmp	r3, #1
 8001802:	d009      	beq.n	8001818 <ADC_Enable+0x40>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	401a      	ands	r2, r3
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	429a      	cmp	r2, r3
 8001816:	d101      	bne.n	800181c <ADC_Enable+0x44>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <ADC_Enable+0x46>
 800181c:	2300      	movs	r3, #0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d152      	bne.n	80018c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <ADC_Enable+0xfc>)
 800182a:	4013      	ands	r3, r2
 800182c:	d00d      	beq.n	800184a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	2210      	movs	r2, #16
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183e:	2201      	movs	r2, #1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e03f      	b.n	80018ca <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <ADC_Enable+0x100>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	491f      	ldr	r1, [pc, #124]	; (80018dc <ADC_Enable+0x104>)
 8001860:	0018      	movs	r0, r3
 8001862:	f7fe fc51 	bl	8000108 <__udivsi3>
 8001866:	0003      	movs	r3, r0
 8001868:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800186a:	e002      	b.n	8001872 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	3b01      	subs	r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f9      	bne.n	800186c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001878:	f7ff fc3a 	bl	80010f0 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001880:	e01b      	b.n	80018ba <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001882:	f7ff fc35 	bl	80010f0 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d914      	bls.n	80018ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	2b01      	cmp	r3, #1
 800189c:	d00d      	beq.n	80018ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	2210      	movs	r2, #16
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	2201      	movs	r2, #1
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e007      	b.n	80018ca <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d1dc      	bne.n	8001882 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	80000017 	.word	0x80000017
 80018d8:	20000004 	.word	0x20000004
 80018dc:	000f4240 	.word	0x000f4240

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0002      	movs	r2, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b7f      	cmp	r3, #127	; 0x7f
 80018f4:	d828      	bhi.n	8001948 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f6:	4a2f      	ldr	r2, [pc, #188]	; (80019b4 <__NVIC_SetPriority+0xd4>)
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	33c0      	adds	r3, #192	; 0xc0
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	589b      	ldr	r3, [r3, r2]
 8001906:	1dfa      	adds	r2, r7, #7
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	0011      	movs	r1, r2
 800190c:	2203      	movs	r2, #3
 800190e:	400a      	ands	r2, r1
 8001910:	00d2      	lsls	r2, r2, #3
 8001912:	21ff      	movs	r1, #255	; 0xff
 8001914:	4091      	lsls	r1, r2
 8001916:	000a      	movs	r2, r1
 8001918:	43d2      	mvns	r2, r2
 800191a:	401a      	ands	r2, r3
 800191c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	22ff      	movs	r2, #255	; 0xff
 8001924:	401a      	ands	r2, r3
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	0018      	movs	r0, r3
 800192c:	2303      	movs	r3, #3
 800192e:	4003      	ands	r3, r0
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001934:	481f      	ldr	r0, [pc, #124]	; (80019b4 <__NVIC_SetPriority+0xd4>)
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b25b      	sxtb	r3, r3
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	430a      	orrs	r2, r1
 8001940:	33c0      	adds	r3, #192	; 0xc0
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001946:	e031      	b.n	80019ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <__NVIC_SetPriority+0xd8>)
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	0019      	movs	r1, r3
 8001950:	230f      	movs	r3, #15
 8001952:	400b      	ands	r3, r1
 8001954:	3b08      	subs	r3, #8
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3306      	adds	r3, #6
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	18d3      	adds	r3, r2, r3
 800195e:	3304      	adds	r3, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1dfa      	adds	r2, r7, #7
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	0011      	movs	r1, r2
 8001968:	2203      	movs	r2, #3
 800196a:	400a      	ands	r2, r1
 800196c:	00d2      	lsls	r2, r2, #3
 800196e:	21ff      	movs	r1, #255	; 0xff
 8001970:	4091      	lsls	r1, r2
 8001972:	000a      	movs	r2, r1
 8001974:	43d2      	mvns	r2, r2
 8001976:	401a      	ands	r2, r3
 8001978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	22ff      	movs	r2, #255	; 0xff
 8001980:	401a      	ands	r2, r3
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	0018      	movs	r0, r3
 8001988:	2303      	movs	r3, #3
 800198a:	4003      	ands	r3, r0
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <__NVIC_SetPriority+0xd8>)
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	001c      	movs	r4, r3
 8001998:	230f      	movs	r3, #15
 800199a:	4023      	ands	r3, r4
 800199c:	3b08      	subs	r3, #8
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	430a      	orrs	r2, r1
 80019a2:	3306      	adds	r3, #6
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	18c3      	adds	r3, r0, r3
 80019a8:	3304      	adds	r3, #4
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b003      	add	sp, #12
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	1e5a      	subs	r2, r3, #1
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	045b      	lsls	r3, r3, #17
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d301      	bcc.n	80019d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d0:	2301      	movs	r3, #1
 80019d2:	e010      	b.n	80019f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <SysTick_Config+0x44>)
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	3a01      	subs	r2, #1
 80019da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019dc:	2301      	movs	r3, #1
 80019de:	425b      	negs	r3, r3
 80019e0:	2103      	movs	r1, #3
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff ff7c 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x44>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x44>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	210f      	movs	r1, #15
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	1c02      	adds	r2, r0, #0
 8001a14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	0011      	movs	r1, r2
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ff5d 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff ffbf 	bl	80019bc <SysTick_Config>
 8001a3e:	0003      	movs	r3, r0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e149      	b.n	8001cec <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4091      	lsls	r1, r2
 8001a62:	000a      	movs	r2, r1
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d100      	bne.n	8001a70 <HAL_GPIO_Init+0x28>
 8001a6e:	e13a      	b.n	8001ce6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d005      	beq.n	8001a88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d130      	bne.n	8001aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	0013      	movs	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abe:	2201      	movs	r2, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d017      	beq.n	8001b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d123      	bne.n	8001b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	58d3      	ldr	r3, [r2, r3]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2107      	movs	r1, #7
 8001b5e:	400b      	ands	r3, r1
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	6939      	ldr	r1, [r7, #16]
 8001b78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	401a      	ands	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	23c0      	movs	r3, #192	; 0xc0
 8001bb4:	029b      	lsls	r3, r3, #10
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d100      	bne.n	8001bbc <HAL_GPIO_Init+0x174>
 8001bba:	e094      	b.n	8001ce6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbc:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x2c0>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	589b      	ldr	r3, [r3, r2]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	2390      	movs	r3, #144	; 0x90
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x1d6>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a41      	ldr	r2, [pc, #260]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x1d2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a40      	ldr	r2, [pc, #256]	; (8001d10 <HAL_GPIO_Init+0x2c8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x1ce>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	2103      	movs	r1, #3
 8001c24:	400a      	ands	r2, r1
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c30:	4935      	ldr	r1, [pc, #212]	; (8001d08 <HAL_GPIO_Init+0x2c0>)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3e:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43da      	mvns	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	025b      	lsls	r3, r3, #9
 8001c56:	4013      	ands	r3, r2
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	035b      	lsls	r3, r3, #13
 8001caa:	4013      	ands	r3, r2
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	039b      	lsls	r3, r3, #14
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	40da      	lsrs	r2, r3
 8001cf4:	1e13      	subs	r3, r2, #0
 8001cf6:	d000      	beq.n	8001cfa <HAL_GPIO_Init+0x2b2>
 8001cf8:	e6ae      	b.n	8001a58 <HAL_GPIO_Init+0x10>
  } 
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b006      	add	sp, #24
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	48000400 	.word	0x48000400
 8001d10:	48000800 	.word	0x48000800
 8001d14:	40010400 	.word	0x40010400

08001d18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	000a      	movs	r2, r1
 8001d22:	1cbb      	adds	r3, r7, #2
 8001d24:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	1cba      	adds	r2, r7, #2
 8001d2c:	8812      	ldrh	r2, [r2, #0]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d004      	beq.n	8001d3c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d32:	230f      	movs	r3, #15
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e003      	b.n	8001d44 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d44:	230f      	movs	r3, #15
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	781b      	ldrb	r3, [r3, #0]
  }
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b004      	add	sp, #16
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	0008      	movs	r0, r1
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	1cbb      	adds	r3, r7, #2
 8001d60:	1c02      	adds	r2, r0, #0
 8001d62:	801a      	strh	r2, [r3, #0]
 8001d64:	1c7b      	adds	r3, r7, #1
 8001d66:	1c0a      	adds	r2, r1, #0
 8001d68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d6a:	1c7b      	adds	r3, r7, #1
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d72:	1cbb      	adds	r3, r7, #2
 8001d74:	881a      	ldrh	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d7a:	e003      	b.n	8001d84 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7c:	1cbb      	adds	r3, r7, #2
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e301      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2201      	movs	r2, #1
 8001da4:	4013      	ands	r3, r2
 8001da6:	d100      	bne.n	8001daa <HAL_RCC_OscConfig+0x1e>
 8001da8:	e08d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001daa:	4bc3      	ldr	r3, [pc, #780]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	220c      	movs	r2, #12
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d00e      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db6:	4bc0      	ldr	r3, [pc, #768]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	220c      	movs	r2, #12
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d116      	bne.n	8001df0 <HAL_RCC_OscConfig+0x64>
 8001dc2:	4bbd      	ldr	r3, [pc, #756]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	025b      	lsls	r3, r3, #9
 8001dca:	401a      	ands	r2, r3
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	4bb8      	ldr	r3, [pc, #736]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d100      	bne.n	8001de2 <HAL_RCC_OscConfig+0x56>
 8001de0:	e070      	b.n	8001ec4 <HAL_RCC_OscConfig+0x138>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d000      	beq.n	8001dec <HAL_RCC_OscConfig+0x60>
 8001dea:	e06b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e2d8      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_OscConfig+0x7c>
 8001df8:	4baf      	ldr	r3, [pc, #700]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4bae      	ldr	r3, [pc, #696]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	0249      	lsls	r1, r1, #9
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e02f      	b.n	8001e68 <HAL_RCC_OscConfig+0xdc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x9e>
 8001e10:	4ba9      	ldr	r3, [pc, #676]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4ba8      	ldr	r3, [pc, #672]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e16:	49a9      	ldr	r1, [pc, #676]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	4ba6      	ldr	r3, [pc, #664]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4ba5      	ldr	r3, [pc, #660]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e22:	49a7      	ldr	r1, [pc, #668]	; (80020c0 <HAL_RCC_OscConfig+0x334>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e01e      	b.n	8001e68 <HAL_RCC_OscConfig+0xdc>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d10e      	bne.n	8001e50 <HAL_RCC_OscConfig+0xc4>
 8001e32:	4ba1      	ldr	r3, [pc, #644]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4ba0      	ldr	r3, [pc, #640]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	02c9      	lsls	r1, r1, #11
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	4b9d      	ldr	r3, [pc, #628]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b9c      	ldr	r3, [pc, #624]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0249      	lsls	r1, r1, #9
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0xdc>
 8001e50:	4b99      	ldr	r3, [pc, #612]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b98      	ldr	r3, [pc, #608]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	4999      	ldr	r1, [pc, #612]	; (80020bc <HAL_RCC_OscConfig+0x330>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	4b96      	ldr	r3, [pc, #600]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b95      	ldr	r3, [pc, #596]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e62:	4997      	ldr	r1, [pc, #604]	; (80020c0 <HAL_RCC_OscConfig+0x334>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d014      	beq.n	8001e9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff f93e 	bl	80010f0 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7a:	f7ff f939 	bl	80010f0 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e28a      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	4013      	ands	r3, r2
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0xee>
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f929 	bl	80010f0 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f924 	bl	80010f0 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e275      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	4b80      	ldr	r3, [pc, #512]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x118>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x146>
 8001ed0:	e069      	b.n	8001fa6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ed2:	4b79      	ldr	r3, [pc, #484]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d00b      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001edc:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	220c      	movs	r2, #12
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d11c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x196>
 8001ee8:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	025b      	lsls	r3, r3, #9
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d116      	bne.n	8001f22 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef4:	4b70      	ldr	r3, [pc, #448]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e24b      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b6b      	ldr	r3, [pc, #428]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	22f8      	movs	r2, #248	; 0xf8
 8001f10:	4393      	bics	r3, r2
 8001f12:	0019      	movs	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	00da      	lsls	r2, r3, #3
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f20:	e041      	b.n	8001fa6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d024      	beq.n	8001f74 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff f8db 	bl	80010f0 <HAL_GetTick>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff f8d6 	bl	80010f0 <HAL_GetTick>
 8001f44:	0002      	movs	r2, r0
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e227      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d0f1      	beq.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	22f8      	movs	r2, #248	; 0xf8
 8001f62:	4393      	bics	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00da      	lsls	r2, r3, #3
 8001f6c:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e018      	b.n	8001fa6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b4f      	ldr	r3, [pc, #316]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f8b6 	bl	80010f0 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f8b1 	bl	80010f0 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e202      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d1f1      	bne.n	8001f8a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2208      	movs	r2, #8
 8001fac:	4013      	ands	r3, r2
 8001fae:	d036      	beq.n	800201e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d019      	beq.n	8001fec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fbc:	4b3e      	ldr	r3, [pc, #248]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f894 	bl	80010f0 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff f88f 	bl	80010f0 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1e0      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d0f1      	beq.n	8001fce <HAL_RCC_OscConfig+0x242>
 8001fea:	e018      	b.n	800201e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff0:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff f87a 	bl	80010f0 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff f875 	bl	80010f0 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1c6      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d1f1      	bne.n	8002002 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2204      	movs	r2, #4
 8002024:	4013      	ands	r3, r2
 8002026:	d100      	bne.n	800202a <HAL_RCC_OscConfig+0x29e>
 8002028:	e0b4      	b.n	8002194 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	201f      	movs	r0, #31
 800202c:	183b      	adds	r3, r7, r0
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	055b      	lsls	r3, r3, #21
 800203a:	4013      	ands	r3, r2
 800203c:	d110      	bne.n	8002060 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0549      	lsls	r1, r1, #21
 8002048:	430a      	orrs	r2, r1
 800204a:	61da      	str	r2, [r3, #28]
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 800204e:	69da      	ldr	r2, [r3, #28]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800205a:	183b      	adds	r3, r7, r0
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_RCC_OscConfig+0x338>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4013      	ands	r3, r2
 800206a:	d11a      	bne.n	80020a2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_RCC_OscConfig+0x338>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_RCC_OscConfig+0x338>)
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	0049      	lsls	r1, r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff f839 	bl	80010f0 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002084:	f7ff f834 	bl	80010f0 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e185      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x338>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4013      	ands	r3, r2
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10e      	bne.n	80020c8 <HAL_RCC_OscConfig+0x33c>
 80020aa:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_RCC_OscConfig+0x32c>)
 80020b0:	2101      	movs	r1, #1
 80020b2:	430a      	orrs	r2, r1
 80020b4:	621a      	str	r2, [r3, #32]
 80020b6:	e035      	b.n	8002124 <HAL_RCC_OscConfig+0x398>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	fffeffff 	.word	0xfffeffff
 80020c0:	fffbffff 	.word	0xfffbffff
 80020c4:	40007000 	.word	0x40007000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10c      	bne.n	80020ea <HAL_RCC_OscConfig+0x35e>
 80020d0:	4bb6      	ldr	r3, [pc, #728]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	4bb5      	ldr	r3, [pc, #724]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	621a      	str	r2, [r3, #32]
 80020dc:	4bb3      	ldr	r3, [pc, #716]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	4bb2      	ldr	r3, [pc, #712]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80020e2:	2104      	movs	r1, #4
 80020e4:	438a      	bics	r2, r1
 80020e6:	621a      	str	r2, [r3, #32]
 80020e8:	e01c      	b.n	8002124 <HAL_RCC_OscConfig+0x398>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x380>
 80020f2:	4bae      	ldr	r3, [pc, #696]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80020f4:	6a1a      	ldr	r2, [r3, #32]
 80020f6:	4bad      	ldr	r3, [pc, #692]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80020f8:	2104      	movs	r1, #4
 80020fa:	430a      	orrs	r2, r1
 80020fc:	621a      	str	r2, [r3, #32]
 80020fe:	4bab      	ldr	r3, [pc, #684]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	4baa      	ldr	r3, [pc, #680]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	621a      	str	r2, [r3, #32]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0x398>
 800210c:	4ba7      	ldr	r3, [pc, #668]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	4ba6      	ldr	r3, [pc, #664]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002112:	2101      	movs	r1, #1
 8002114:	438a      	bics	r2, r1
 8002116:	621a      	str	r2, [r3, #32]
 8002118:	4ba4      	ldr	r3, [pc, #656]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	4ba3      	ldr	r3, [pc, #652]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800211e:	2104      	movs	r1, #4
 8002120:	438a      	bics	r2, r1
 8002122:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d014      	beq.n	8002156 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212c:	f7fe ffe0 	bl	80010f0 <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e009      	b.n	800214a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe ffdb 	bl	80010f0 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4a9b      	ldr	r2, [pc, #620]	; (80023b0 <HAL_RCC_OscConfig+0x624>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e12b      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214a:	4b98      	ldr	r3, [pc, #608]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x3aa>
 8002154:	e013      	b.n	800217e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7fe ffcb 	bl	80010f0 <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215e:	e009      	b.n	8002174 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe ffc6 	bl	80010f0 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	4a91      	ldr	r2, [pc, #580]	; (80023b0 <HAL_RCC_OscConfig+0x624>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e116      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	4b8d      	ldr	r3, [pc, #564]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	2202      	movs	r2, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800217e:	231f      	movs	r3, #31
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	4b87      	ldr	r3, [pc, #540]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800218e:	4989      	ldr	r1, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0x628>)
 8002190:	400a      	ands	r2, r1
 8002192:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2210      	movs	r2, #16
 800219a:	4013      	ands	r3, r2
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d12a      	bne.n	80021fc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021a6:	4b81      	ldr	r3, [pc, #516]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80021a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021aa:	4b80      	ldr	r3, [pc, #512]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80021ac:	2104      	movs	r1, #4
 80021ae:	430a      	orrs	r2, r1
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021b2:	4b7e      	ldr	r3, [pc, #504]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80021b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b6:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7fe ff97 	bl	80010f0 <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021c8:	f7fe ff92 	bl	80010f0 <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0e3      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021da:	4b74      	ldr	r3, [pc, #464]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d0f1      	beq.n	80021c8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021e4:	4b71      	ldr	r3, [pc, #452]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	22f8      	movs	r2, #248	; 0xf8
 80021ea:	4393      	bics	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	00da      	lsls	r2, r3, #3
 80021f4:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
 80021fa:	e034      	b.n	8002266 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	3305      	adds	r3, #5
 8002202:	d111      	bne.n	8002228 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002204:	4b69      	ldr	r3, [pc, #420]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800220a:	2104      	movs	r1, #4
 800220c:	438a      	bics	r2, r1
 800220e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002210:	4b66      	ldr	r3, [pc, #408]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	22f8      	movs	r2, #248	; 0xf8
 8002216:	4393      	bics	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	00da      	lsls	r2, r3, #3
 8002220:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002222:	430a      	orrs	r2, r1
 8002224:	635a      	str	r2, [r3, #52]	; 0x34
 8002226:	e01e      	b.n	8002266 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002228:	4b60      	ldr	r3, [pc, #384]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800222a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222c:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800222e:	2104      	movs	r1, #4
 8002230:	430a      	orrs	r2, r1
 8002232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002234:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002238:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800223a:	2101      	movs	r1, #1
 800223c:	438a      	bics	r2, r1
 800223e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe ff56 	bl	80010f0 <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800224a:	f7fe ff51 	bl	80010f0 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0a2      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	2202      	movs	r2, #2
 8002262:	4013      	ands	r3, r2
 8002264:	d1f1      	bne.n	800224a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d100      	bne.n	8002270 <HAL_RCC_OscConfig+0x4e4>
 800226e:	e097      	b.n	80023a0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002270:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	220c      	movs	r2, #12
 8002276:	4013      	ands	r3, r2
 8002278:	2b08      	cmp	r3, #8
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x4f2>
 800227c:	e06b      	b.n	8002356 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d14c      	bne.n	8002320 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800228c:	494a      	ldr	r1, [pc, #296]	; (80023b8 <HAL_RCC_OscConfig+0x62c>)
 800228e:	400a      	ands	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7fe ff2d 	bl	80010f0 <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe ff28 	bl	80010f0 <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e079      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	049b      	lsls	r3, r3, #18
 80022b6:	4013      	ands	r3, r2
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ba:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	220f      	movs	r2, #15
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <HAL_RCC_OscConfig+0x630>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	431a      	orrs	r2, r3
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	0449      	lsls	r1, r1, #17
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7fe fefb 	bl	80010f0 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002300:	f7fe fef6 	bl	80010f0 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e047      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	049b      	lsls	r3, r3, #18
 800231a:	4013      	ands	r3, r2
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x574>
 800231e:	e03f      	b.n	80023a0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002320:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002326:	4924      	ldr	r1, [pc, #144]	; (80023b8 <HAL_RCC_OscConfig+0x62c>)
 8002328:	400a      	ands	r2, r1
 800232a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fee0 	bl	80010f0 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fedb 	bl	80010f0 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e02c      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	049b      	lsls	r3, r3, #18
 8002350:	4013      	ands	r3, r2
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x5aa>
 8002354:	e024      	b.n	80023a0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e01f      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_OscConfig+0x620>)
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	025b      	lsls	r3, r3, #9
 8002374:	401a      	ands	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	429a      	cmp	r2, r3
 800237c:	d10e      	bne.n	800239c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	220f      	movs	r2, #15
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	23f0      	movs	r3, #240	; 0xf0
 8002390:	039b      	lsls	r3, r3, #14
 8002392:	401a      	ands	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b008      	add	sp, #32
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40021000 	.word	0x40021000
 80023b0:	00001388 	.word	0x00001388
 80023b4:	efffffff 	.word	0xefffffff
 80023b8:	feffffff 	.word	0xfeffffff
 80023bc:	ffc2ffff 	.word	0xffc2ffff

080023c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0b3      	b.n	800253c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <HAL_RCC_ClockConfig+0x184>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d911      	bls.n	8002406 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b58      	ldr	r3, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x184>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2201      	movs	r2, #1
 80023e8:	4393      	bics	r3, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	4b55      	ldr	r3, [pc, #340]	; (8002544 <HAL_RCC_ClockConfig+0x184>)
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x184>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2201      	movs	r2, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d001      	beq.n	8002406 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e09a      	b.n	800253c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2202      	movs	r2, #2
 800240c:	4013      	ands	r3, r2
 800240e:	d015      	beq.n	800243c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2204      	movs	r2, #4
 8002416:	4013      	ands	r3, r2
 8002418:	d006      	beq.n	8002428 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800241a:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002420:	21e0      	movs	r1, #224	; 0xe0
 8002422:	00c9      	lsls	r1, r1, #3
 8002424:	430a      	orrs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	22f0      	movs	r2, #240	; 0xf0
 800242e:	4393      	bics	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	4b44      	ldr	r3, [pc, #272]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	4013      	ands	r3, r2
 8002444:	d040      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	029b      	lsls	r3, r3, #10
 8002456:	4013      	ands	r3, r2
 8002458:	d114      	bne.n	8002484 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06e      	b.n	800253c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	049b      	lsls	r3, r3, #18
 800246e:	4013      	ands	r3, r2
 8002470:	d108      	bne.n	8002484 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e062      	b.n	800253c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e05b      	b.n	800253c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	4393      	bics	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7fe fe2a 	bl	80010f0 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a2:	f7fe fe25 	bl	80010f0 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a27      	ldr	r2, [pc, #156]	; (800254c <HAL_RCC_ClockConfig+0x18c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e042      	b.n	800253c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	220c      	movs	r2, #12
 80024bc:	401a      	ands	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1ec      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_RCC_ClockConfig+0x184>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d211      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCC_ClockConfig+0x184>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_RCC_ClockConfig+0x184>)
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x184>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2201      	movs	r2, #1
 80024ee:	4013      	ands	r3, r2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e020      	b.n	800253c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a11      	ldr	r2, [pc, #68]	; (8002550 <HAL_RCC_ClockConfig+0x190>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002518:	f000 f820 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251c:	0001      	movs	r1, r0
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x188>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	220f      	movs	r2, #15
 8002526:	4013      	ands	r3, r2
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <HAL_RCC_ClockConfig+0x194>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	000a      	movs	r2, r1
 800252e:	40da      	lsrs	r2, r3
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x198>)
 8002532:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002534:	2003      	movs	r0, #3
 8002536:	f7fe fd95 	bl	8001064 <HAL_InitTick>
  
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40022000 	.word	0x40022000
 8002548:	40021000 	.word	0x40021000
 800254c:	00001388 	.word	0x00001388
 8002550:	fffff8ff 	.word	0xfffff8ff
 8002554:	0800339c 	.word	0x0800339c
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b08f      	sub	sp, #60	; 0x3c
 8002560:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002562:	2314      	movs	r3, #20
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	ca13      	ldmia	r2!, {r0, r1, r4}
 800256a:	c313      	stmia	r3!, {r0, r1, r4}
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	4a29      	ldr	r2, [pc, #164]	; (8002618 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002576:	c313      	stmia	r3!, {r0, r1, r4}
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	220c      	movs	r2, #12
 800259a:	4013      	ands	r3, r2
 800259c:	2b04      	cmp	r3, #4
 800259e:	d002      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x4a>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x50>
 80025a4:	e02d      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025aa:	e02d      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	220f      	movs	r2, #15
 80025b2:	4013      	ands	r3, r2
 80025b4:	2214      	movs	r2, #20
 80025b6:	18ba      	adds	r2, r7, r2
 80025b8:	5cd3      	ldrb	r3, [r2, r3]
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	220f      	movs	r2, #15
 80025c2:	4013      	ands	r3, r2
 80025c4:	1d3a      	adds	r2, r7, #4
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	025b      	lsls	r3, r3, #9
 80025d0:	4013      	ands	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025d6:	4812      	ldr	r0, [pc, #72]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025d8:	f7fd fd96 	bl	8000108 <__udivsi3>
 80025dc:	0003      	movs	r3, r0
 80025de:	001a      	movs	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	4353      	muls	r3, r2
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
 80025e6:	e009      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ea:	000a      	movs	r2, r1
 80025ec:	0152      	lsls	r2, r2, #5
 80025ee:	1a52      	subs	r2, r2, r1
 80025f0:	0193      	lsls	r3, r2, #6
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	185b      	adds	r3, r3, r1
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002600:	e002      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002606:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b00f      	add	sp, #60	; 0x3c
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	08003348 	.word	0x08003348
 8002618:	08003358 	.word	0x08003358
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200

08002624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e042      	b.n	80026bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	223d      	movs	r2, #61	; 0x3d
 800263a:	5c9b      	ldrb	r3, [r3, r2]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d107      	bne.n	8002652 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	223c      	movs	r2, #60	; 0x3c
 8002646:	2100      	movs	r1, #0
 8002648:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0018      	movs	r0, r3
 800264e:	f7fe fc0f 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	223d      	movs	r2, #61	; 0x3d
 8002656:	2102      	movs	r1, #2
 8002658:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3304      	adds	r3, #4
 8002662:	0019      	movs	r1, r3
 8002664:	0010      	movs	r0, r2
 8002666:	f000 facb 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2246      	movs	r2, #70	; 0x46
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	223e      	movs	r2, #62	; 0x3e
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	223f      	movs	r2, #63	; 0x3f
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2241      	movs	r2, #65	; 0x41
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2242      	movs	r2, #66	; 0x42
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2243      	movs	r2, #67	; 0x43
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2244      	movs	r2, #68	; 0x44
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2245      	movs	r2, #69	; 0x45
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	223d      	movs	r2, #61	; 0x3d
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e042      	b.n	800275c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223d      	movs	r2, #61	; 0x3d
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	223c      	movs	r2, #60	; 0x3c
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 f839 	bl	8002764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	223d      	movs	r2, #61	; 0x3d
 80026f6:	2102      	movs	r1, #2
 80026f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	0019      	movs	r1, r3
 8002704:	0010      	movs	r0, r2
 8002706:	f000 fa7b 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2246      	movs	r2, #70	; 0x46
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	223e      	movs	r2, #62	; 0x3e
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	223f      	movs	r2, #63	; 0x3f
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2240      	movs	r2, #64	; 0x40
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2241      	movs	r2, #65	; 0x41
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2242      	movs	r2, #66	; 0x42
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2243      	movs	r2, #67	; 0x43
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2244      	movs	r2, #68	; 0x44
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2245      	movs	r2, #69	; 0x45
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223d      	movs	r2, #61	; 0x3d
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d108      	bne.n	8002796 <HAL_TIM_PWM_Start+0x22>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	223e      	movs	r2, #62	; 0x3e
 8002788:	5c9b      	ldrb	r3, [r3, r2]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	4193      	sbcs	r3, r2
 8002792:	b2db      	uxtb	r3, r3
 8002794:	e01f      	b.n	80027d6 <HAL_TIM_PWM_Start+0x62>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d108      	bne.n	80027ae <HAL_TIM_PWM_Start+0x3a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	223f      	movs	r2, #63	; 0x3f
 80027a0:	5c9b      	ldrb	r3, [r3, r2]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	1e5a      	subs	r2, r3, #1
 80027a8:	4193      	sbcs	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e013      	b.n	80027d6 <HAL_TIM_PWM_Start+0x62>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d108      	bne.n	80027c6 <HAL_TIM_PWM_Start+0x52>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	4193      	sbcs	r3, r2
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	e007      	b.n	80027d6 <HAL_TIM_PWM_Start+0x62>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2241      	movs	r2, #65	; 0x41
 80027ca:	5c9b      	ldrb	r3, [r3, r2]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	1e5a      	subs	r2, r3, #1
 80027d2:	4193      	sbcs	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06a      	b.n	80028b4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0x7a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	223e      	movs	r2, #62	; 0x3e
 80027e8:	2102      	movs	r1, #2
 80027ea:	5499      	strb	r1, [r3, r2]
 80027ec:	e013      	b.n	8002816 <HAL_TIM_PWM_Start+0xa2>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_PWM_Start+0x8a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	223f      	movs	r2, #63	; 0x3f
 80027f8:	2102      	movs	r1, #2
 80027fa:	5499      	strb	r1, [r3, r2]
 80027fc:	e00b      	b.n	8002816 <HAL_TIM_PWM_Start+0xa2>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d104      	bne.n	800280e <HAL_TIM_PWM_Start+0x9a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2240      	movs	r2, #64	; 0x40
 8002808:	2102      	movs	r1, #2
 800280a:	5499      	strb	r1, [r3, r2]
 800280c:	e003      	b.n	8002816 <HAL_TIM_PWM_Start+0xa2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2241      	movs	r2, #65	; 0x41
 8002812:	2102      	movs	r1, #2
 8002814:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	2201      	movs	r2, #1
 800281e:	0018      	movs	r0, r3
 8002820:	f000 fcde 	bl	80031e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <HAL_TIM_PWM_Start+0x148>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_TIM_PWM_Start+0xce>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_PWM_Start+0x14c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <HAL_TIM_PWM_Start+0xce>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <HAL_TIM_PWM_Start+0x150>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_TIM_PWM_Start+0xd2>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_TIM_PWM_Start+0xd4>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	0209      	lsls	r1, r1, #8
 800285a:	430a      	orrs	r2, r1
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_TIM_PWM_Start+0x148>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00a      	beq.n	800287e <HAL_TIM_PWM_Start+0x10a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	05db      	lsls	r3, r3, #23
 8002870:	429a      	cmp	r2, r3
 8002872:	d004      	beq.n	800287e <HAL_TIM_PWM_Start+0x10a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <HAL_TIM_PWM_Start+0x154>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d111      	bne.n	80028a2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2207      	movs	r2, #7
 8002886:	4013      	ands	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d010      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2101      	movs	r1, #1
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	e007      	b.n	80028b2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b004      	add	sp, #16
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800
 80028c8:	40000400 	.word	0x40000400

080028cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2317      	movs	r3, #23
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	223c      	movs	r2, #60	; 0x3c
 80028e4:	5c9b      	ldrb	r3, [r3, r2]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e0ad      	b.n	8002a4a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	223c      	movs	r2, #60	; 0x3c
 80028f2:	2101      	movs	r1, #1
 80028f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d100      	bne.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80028fc:	e076      	b.n	80029ec <HAL_TIM_PWM_ConfigChannel+0x120>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d900      	bls.n	8002906 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002904:	e095      	b.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d04e      	beq.n	80029aa <HAL_TIM_PWM_ConfigChannel+0xde>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b08      	cmp	r3, #8
 8002910:	d900      	bls.n	8002914 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002912:	e08e      	b.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x56>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d021      	beq.n	8002964 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002920:	e087      	b.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	0011      	movs	r1, r2
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f9de 	bl	8002cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2108      	movs	r1, #8
 800293c:	430a      	orrs	r2, r1
 800293e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2104      	movs	r1, #4
 800294c:	438a      	bics	r2, r1
 800294e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6999      	ldr	r1, [r3, #24]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	619a      	str	r2, [r3, #24]
      break;
 8002962:	e06b      	b.n	8002a3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	0011      	movs	r1, r2
 800296c:	0018      	movs	r0, r3
 800296e:	f000 fa3b 	bl	8002de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	0109      	lsls	r1, r1, #4
 8002980:	430a      	orrs	r2, r1
 8002982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4931      	ldr	r1, [pc, #196]	; (8002a54 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002990:	400a      	ands	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6999      	ldr	r1, [r3, #24]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	021a      	lsls	r2, r3, #8
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	619a      	str	r2, [r3, #24]
      break;
 80029a8:	e048      	b.n	8002a3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	0011      	movs	r1, r2
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fa96 	bl	8002ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2108      	movs	r1, #8
 80029c4:	430a      	orrs	r2, r1
 80029c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2104      	movs	r1, #4
 80029d4:	438a      	bics	r2, r1
 80029d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69d9      	ldr	r1, [r3, #28]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	61da      	str	r2, [r3, #28]
      break;
 80029ea:	e027      	b.n	8002a3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	0011      	movs	r1, r2
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 faf5 	bl	8002fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0109      	lsls	r1, r1, #4
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	490f      	ldr	r1, [pc, #60]	; (8002a54 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a18:	400a      	ands	r2, r1
 8002a1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69d9      	ldr	r1, [r3, #28]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	021a      	lsls	r2, r3, #8
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
      break;
 8002a30:	e004      	b.n	8002a3c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002a32:	2317      	movs	r3, #23
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
      break;
 8002a3a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	223c      	movs	r2, #60	; 0x3c
 8002a40:	2100      	movs	r1, #0
 8002a42:	5499      	strb	r1, [r3, r2]

  return status;
 8002a44:	2317      	movs	r3, #23
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	781b      	ldrb	r3, [r3, #0]
}
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b006      	add	sp, #24
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	fffffbff 	.word	0xfffffbff

08002a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	230f      	movs	r3, #15
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223c      	movs	r2, #60	; 0x3c
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_TIM_ConfigClockSource+0x20>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0bc      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x19a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	223c      	movs	r2, #60	; 0x3c
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	223d      	movs	r2, #61	; 0x3d
 8002a84:	2102      	movs	r1, #2
 8002a86:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2277      	movs	r2, #119	; 0x77
 8002a94:	4393      	bics	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	0192      	lsls	r2, r2, #6
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d040      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0xde>
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	0192      	lsls	r2, r2, #6
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d900      	bls.n	8002abe <HAL_TIM_ConfigClockSource+0x66>
 8002abc:	e088      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	0152      	lsls	r2, r2, #5
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d100      	bne.n	8002ac8 <HAL_TIM_ConfigClockSource+0x70>
 8002ac6:	e088      	b.n	8002bda <HAL_TIM_ConfigClockSource+0x182>
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	0152      	lsls	r2, r2, #5
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d900      	bls.n	8002ad2 <HAL_TIM_ConfigClockSource+0x7a>
 8002ad0:	e07e      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
 8002ad2:	2b70      	cmp	r3, #112	; 0x70
 8002ad4:	d018      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0xb0>
 8002ad6:	d900      	bls.n	8002ada <HAL_TIM_ConfigClockSource+0x82>
 8002ad8:	e07a      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
 8002ada:	2b60      	cmp	r3, #96	; 0x60
 8002adc:	d04f      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0x126>
 8002ade:	d900      	bls.n	8002ae2 <HAL_TIM_ConfigClockSource+0x8a>
 8002ae0:	e076      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
 8002ae2:	2b50      	cmp	r3, #80	; 0x50
 8002ae4:	d03b      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x106>
 8002ae6:	d900      	bls.n	8002aea <HAL_TIM_ConfigClockSource+0x92>
 8002ae8:	e072      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d057      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x146>
 8002aee:	d900      	bls.n	8002af2 <HAL_TIM_ConfigClockSource+0x9a>
 8002af0:	e06e      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
 8002af2:	2b30      	cmp	r3, #48	; 0x30
 8002af4:	d063      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x166>
 8002af6:	d86b      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d060      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x166>
 8002afc:	d868      	bhi.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d05d      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x166>
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d05b      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x166>
 8002b06:	e063      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f000 fb42 	bl	80031a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2277      	movs	r2, #119	; 0x77
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
      break;
 8002b34:	e052      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f000 fb2b 	bl	80031a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	01c9      	lsls	r1, r1, #7
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]
      break;
 8002b5c:	e03e      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	f000 fa9e 	bl	80030ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2150      	movs	r1, #80	; 0x50
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 faf8 	bl	800316c <TIM_ITRx_SetConfig>
      break;
 8002b7c:	e02e      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	f000 fabc 	bl	8003108 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2160      	movs	r1, #96	; 0x60
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 fae8 	bl	800316c <TIM_ITRx_SetConfig>
      break;
 8002b9c:	e01e      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	001a      	movs	r2, r3
 8002bac:	f000 fa7e 	bl	80030ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2140      	movs	r1, #64	; 0x40
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 fad8 	bl	800316c <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e00e      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	0010      	movs	r0, r2
 8002bca:	f000 facf 	bl	800316c <TIM_ITRx_SetConfig>
      break;
 8002bce:	e005      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002bd0:	230f      	movs	r3, #15
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
      break;
 8002bd8:	e000      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002bda:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	223d      	movs	r2, #61	; 0x3d
 8002be0:	2101      	movs	r1, #1
 8002be2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	223c      	movs	r2, #60	; 0x3c
 8002be8:	2100      	movs	r1, #0
 8002bea:	5499      	strb	r1, [r3, r2]

  return status;
 8002bec:	230f      	movs	r3, #15
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	781b      	ldrb	r3, [r3, #0]
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	ffff00ff 	.word	0xffff00ff

08002c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a30      	ldr	r2, [pc, #192]	; (8002cd4 <TIM_Base_SetConfig+0xd4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d008      	beq.n	8002c2a <TIM_Base_SetConfig+0x2a>
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	05db      	lsls	r3, r3, #23
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d003      	beq.n	8002c2a <TIM_Base_SetConfig+0x2a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2c      	ldr	r2, [pc, #176]	; (8002cd8 <TIM_Base_SetConfig+0xd8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d108      	bne.n	8002c3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2270      	movs	r2, #112	; 0x70
 8002c2e:	4393      	bics	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <TIM_Base_SetConfig+0xd4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d014      	beq.n	8002c6e <TIM_Base_SetConfig+0x6e>
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	05db      	lsls	r3, r3, #23
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d00f      	beq.n	8002c6e <TIM_Base_SetConfig+0x6e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <TIM_Base_SetConfig+0xd8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_Base_SetConfig+0x6e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <TIM_Base_SetConfig+0xdc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x6e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1f      	ldr	r2, [pc, #124]	; (8002ce0 <TIM_Base_SetConfig+0xe0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x6e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <TIM_Base_SetConfig+0xe4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <TIM_Base_SetConfig+0xe8>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	4393      	bics	r3, r2
 8002c86:	001a      	movs	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <TIM_Base_SetConfig+0xd4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <TIM_Base_SetConfig+0xbe>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <TIM_Base_SetConfig+0xe0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <TIM_Base_SetConfig+0xbe>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <TIM_Base_SetConfig+0xe4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d103      	bne.n	8002cc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	615a      	str	r2, [r3, #20]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40002000 	.word	0x40002000
 8002ce0:	40014400 	.word	0x40014400
 8002ce4:	40014800 	.word	0x40014800
 8002ce8:	fffffcff 	.word	0xfffffcff

08002cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	001a      	movs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2270      	movs	r2, #112	; 0x70
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2203      	movs	r2, #3
 8002d22:	4393      	bics	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2202      	movs	r2, #2
 8002d34:	4393      	bics	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <TIM_OC1_SetConfig+0xe8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_OC1_SetConfig+0x6e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <TIM_OC1_SetConfig+0xec>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_OC1_SetConfig+0x6e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <TIM_OC1_SetConfig+0xf0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10c      	bne.n	8002d74 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	4393      	bics	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	4393      	bics	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <TIM_OC1_SetConfig+0xe8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_OC1_SetConfig+0xa0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <TIM_OC1_SetConfig+0xec>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_OC1_SetConfig+0xa0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <TIM_OC1_SetConfig+0xf0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d111      	bne.n	8002db0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <TIM_OC1_SetConfig+0xf4>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <TIM_OC1_SetConfig+0xf8>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b006      	add	sp, #24
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40014400 	.word	0x40014400
 8002ddc:	40014800 	.word	0x40014800
 8002de0:	fffffeff 	.word	0xfffffeff
 8002de4:	fffffdff 	.word	0xfffffdff

08002de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	2210      	movs	r2, #16
 8002df8:	4393      	bics	r3, r2
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a2c      	ldr	r2, [pc, #176]	; (8002ec8 <TIM_OC2_SetConfig+0xe0>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <TIM_OC2_SetConfig+0xe4>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2220      	movs	r2, #32
 8002e32:	4393      	bics	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <TIM_OC2_SetConfig+0xe8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10d      	bne.n	8002e66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	4393      	bics	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	4393      	bics	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <TIM_OC2_SetConfig+0xe8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <TIM_OC2_SetConfig+0x96>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <TIM_OC2_SetConfig+0xec>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_OC2_SetConfig+0x96>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <TIM_OC2_SetConfig+0xf0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d113      	bne.n	8002ea6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <TIM_OC2_SetConfig+0xf4>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <TIM_OC2_SetConfig+0xf8>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	621a      	str	r2, [r3, #32]
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b006      	add	sp, #24
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	ffff8fff 	.word	0xffff8fff
 8002ecc:	fffffcff 	.word	0xfffffcff
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40014400 	.word	0x40014400
 8002ed8:	40014800 	.word	0x40014800
 8002edc:	fffffbff 	.word	0xfffffbff
 8002ee0:	fffff7ff 	.word	0xfffff7ff

08002ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a33      	ldr	r2, [pc, #204]	; (8002fc0 <TIM_OC3_SetConfig+0xdc>)
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2270      	movs	r2, #112	; 0x70
 8002f10:	4393      	bics	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2203      	movs	r2, #3
 8002f18:	4393      	bics	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4a26      	ldr	r2, [pc, #152]	; (8002fc4 <TIM_OC3_SetConfig+0xe0>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <TIM_OC3_SetConfig+0xe4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10d      	bne.n	8002f5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <TIM_OC3_SetConfig+0xe8>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <TIM_OC3_SetConfig+0xec>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <TIM_OC3_SetConfig+0xe4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_OC3_SetConfig+0x92>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <TIM_OC3_SetConfig+0xf0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_OC3_SetConfig+0x92>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <TIM_OC3_SetConfig+0xf4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d113      	bne.n	8002f9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <TIM_OC3_SetConfig+0xf8>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <TIM_OC3_SetConfig+0xfc>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	fffffeff 	.word	0xfffffeff
 8002fc4:	fffffdff 	.word	0xfffffdff
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	fffff7ff 	.word	0xfffff7ff
 8002fd0:	fffffbff 	.word	0xfffffbff
 8002fd4:	40014400 	.word	0x40014400
 8002fd8:	40014800 	.word	0x40014800
 8002fdc:	ffffefff 	.word	0xffffefff
 8002fe0:	ffffdfff 	.word	0xffffdfff

08002fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a26      	ldr	r2, [pc, #152]	; (800308c <TIM_OC4_SetConfig+0xa8>)
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a20      	ldr	r2, [pc, #128]	; (8003090 <TIM_OC4_SetConfig+0xac>)
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <TIM_OC4_SetConfig+0xb0>)
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <TIM_OC4_SetConfig+0xb4>)
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	031b      	lsls	r3, r3, #12
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <TIM_OC4_SetConfig+0xb8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <TIM_OC4_SetConfig+0x70>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <TIM_OC4_SetConfig+0xbc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_OC4_SetConfig+0x70>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <TIM_OC4_SetConfig+0xc0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d109      	bne.n	8003068 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <TIM_OC4_SetConfig+0xc4>)
 8003058:	4013      	ands	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b006      	add	sp, #24
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	ffffefff 	.word	0xffffefff
 8003090:	ffff8fff 	.word	0xffff8fff
 8003094:	fffffcff 	.word	0xfffffcff
 8003098:	ffffdfff 	.word	0xffffdfff
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800
 80030a8:	ffffbfff 	.word	0xffffbfff

080030ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	2201      	movs	r2, #1
 80030c4:	4393      	bics	r3, r2
 80030c6:	001a      	movs	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	22f0      	movs	r2, #240	; 0xf0
 80030d6:	4393      	bics	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	220a      	movs	r2, #10
 80030e8:	4393      	bics	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b006      	add	sp, #24
 8003106:	bd80      	pop	{r7, pc}

08003108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	2210      	movs	r2, #16
 800311a:	4393      	bics	r3, r2
 800311c:	001a      	movs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <TIM_TI2_ConfigInputStage+0x60>)
 8003132:	4013      	ands	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	031b      	lsls	r3, r3, #12
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	22a0      	movs	r2, #160	; 0xa0
 8003144:	4393      	bics	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b006      	add	sp, #24
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	ffff0fff 	.word	0xffff0fff

0800316c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2270      	movs	r2, #112	; 0x70
 8003180:	4393      	bics	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	2207      	movs	r2, #7
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	609a      	str	r2, [r3, #8]
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b004      	add	sp, #16
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4a09      	ldr	r2, [pc, #36]	; (80031dc <TIM_ETR_SetConfig+0x3c>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	021a      	lsls	r2, r3, #8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b006      	add	sp, #24
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	ffff00ff 	.word	0xffff00ff

080031e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	221f      	movs	r2, #31
 80031f0:	4013      	ands	r3, r2
 80031f2:	2201      	movs	r2, #1
 80031f4:	409a      	lsls	r2, r3
 80031f6:	0013      	movs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	43d2      	mvns	r2, r2
 8003202:	401a      	ands	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1a      	ldr	r2, [r3, #32]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	211f      	movs	r1, #31
 8003210:	400b      	ands	r3, r1
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4099      	lsls	r1, r3
 8003216:	000b      	movs	r3, r1
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b006      	add	sp, #24
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	223c      	movs	r2, #60	; 0x3c
 8003236:	5c9b      	ldrb	r3, [r3, r2]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800323c:	2302      	movs	r3, #2
 800323e:	e042      	b.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	223c      	movs	r2, #60	; 0x3c
 8003244:	2101      	movs	r1, #1
 8003246:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	223d      	movs	r2, #61	; 0x3d
 800324c:	2102      	movs	r1, #2
 800324e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2270      	movs	r2, #112	; 0x70
 8003264:	4393      	bics	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00a      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	05db      	lsls	r3, r3, #23
 800328c:	429a      	cmp	r2, r3
 800328e:	d004      	beq.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10c      	bne.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	4393      	bics	r3, r2
 80032a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	223d      	movs	r2, #61	; 0x3d
 80032b8:	2101      	movs	r1, #1
 80032ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	223c      	movs	r2, #60	; 0x3c
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b004      	add	sp, #16
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40000400 	.word	0x40000400

080032d8 <__libc_init_array>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	2600      	movs	r6, #0
 80032dc:	4d0c      	ldr	r5, [pc, #48]	; (8003310 <__libc_init_array+0x38>)
 80032de:	4c0d      	ldr	r4, [pc, #52]	; (8003314 <__libc_init_array+0x3c>)
 80032e0:	1b64      	subs	r4, r4, r5
 80032e2:	10a4      	asrs	r4, r4, #2
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d109      	bne.n	80032fc <__libc_init_array+0x24>
 80032e8:	2600      	movs	r6, #0
 80032ea:	f000 f821 	bl	8003330 <_init>
 80032ee:	4d0a      	ldr	r5, [pc, #40]	; (8003318 <__libc_init_array+0x40>)
 80032f0:	4c0a      	ldr	r4, [pc, #40]	; (800331c <__libc_init_array+0x44>)
 80032f2:	1b64      	subs	r4, r4, r5
 80032f4:	10a4      	asrs	r4, r4, #2
 80032f6:	42a6      	cmp	r6, r4
 80032f8:	d105      	bne.n	8003306 <__libc_init_array+0x2e>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	00b3      	lsls	r3, r6, #2
 80032fe:	58eb      	ldr	r3, [r5, r3]
 8003300:	4798      	blx	r3
 8003302:	3601      	adds	r6, #1
 8003304:	e7ee      	b.n	80032e4 <__libc_init_array+0xc>
 8003306:	00b3      	lsls	r3, r6, #2
 8003308:	58eb      	ldr	r3, [r5, r3]
 800330a:	4798      	blx	r3
 800330c:	3601      	adds	r6, #1
 800330e:	e7f2      	b.n	80032f6 <__libc_init_array+0x1e>
 8003310:	080033ac 	.word	0x080033ac
 8003314:	080033ac 	.word	0x080033ac
 8003318:	080033ac 	.word	0x080033ac
 800331c:	080033b0 	.word	0x080033b0

08003320 <memset>:
 8003320:	0003      	movs	r3, r0
 8003322:	1882      	adds	r2, r0, r2
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	7019      	strb	r1, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <_init>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr

0800333c <_fini>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr
