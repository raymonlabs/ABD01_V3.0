
ABD01_V3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fbc  08002fbc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002fbc  08002fbc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fbc  08002fbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000010  08002fd4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002fd4  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d89  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166f  00000000  00000000  00028dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002a430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002ae40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fac5  00000000  00000000  0002b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae36  00000000  00000000  0003b25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061a0b  00000000  00000000  00046093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a7a9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002438  00000000  00000000  000a7af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f40 	.word	0x08002f40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002f40 	.word	0x08002f40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <pwmDutySet>:
/* USER CODE BEGIN 0 */

/* Driver *****************************************************************************/
// PWM Duty Set
void pwmDutySet(const int duty)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if((duty >= 0) && (duty <= 100))
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	db11      	blt.n	8000252 <pwmDutySet+0x32>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b64      	cmp	r3, #100	; 0x64
 8000232:	dc0e      	bgt.n	8000252 <pwmDutySet+0x32>
    {
        if((duty == 0) || (duty == 100))
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d002      	beq.n	8000240 <pwmDutySet+0x20>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2b64      	cmp	r3, #100	; 0x64
 800023e:	d103      	bne.n	8000248 <pwmDutySet+0x28>
        {
            TIM14->CCR1 = ((100 / 100) * duty);
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <pwmDutySet+0x44>)
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	635a      	str	r2, [r3, #52]	; 0x34
        if((duty == 0) || (duty == 100))
 8000246:	e008      	b.n	800025a <pwmDutySet+0x3a>
        }
        else
        {
            TIM14->CCR1 = ((100 / 100) * duty) - 1;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	1e5a      	subs	r2, r3, #1
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <pwmDutySet+0x44>)
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
        if((duty == 0) || (duty == 100))
 8000250:	e003      	b.n	800025a <pwmDutySet+0x3a>
        }
    }
    else
    {
        TIM14->CCR1 = 0;
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <pwmDutySet+0x44>)
 8000254:	2200      	movs	r2, #0
 8000256:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	46bd      	mov	sp, r7
 800025e:	b002      	add	sp, #8
 8000260:	bd80      	pop	{r7, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	40002000 	.word	0x40002000

08000268 <buzzerControl>:

// Buzzer Control
void buzzerControl(const eBuzMode_t mode, const int count)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	0002      	movs	r2, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b03      	cmp	r3, #3
 800027c:	d029      	beq.n	80002d2 <buzzerControl+0x6a>
 800027e:	dc41      	bgt.n	8000304 <buzzerControl+0x9c>
 8000280:	2b02      	cmp	r3, #2
 8000282:	d00d      	beq.n	80002a0 <buzzerControl+0x38>
 8000284:	dc3e      	bgt.n	8000304 <buzzerControl+0x9c>
 8000286:	2b00      	cmp	r3, #0
 8000288:	d002      	beq.n	8000290 <buzzerControl+0x28>
 800028a:	2b01      	cmp	r3, #1
 800028c:	d004      	beq.n	8000298 <buzzerControl+0x30>
 800028e:	e039      	b.n	8000304 <buzzerControl+0x9c>
	{
		case buzz_off: TIM3->CCR1 = 0; break;
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <buzzerControl+0xac>)
 8000292:	2200      	movs	r2, #0
 8000294:	635a      	str	r2, [r3, #52]	; 0x34
 8000296:	e039      	b.n	800030c <buzzerControl+0xa4>
		case buzz_on: TIM3->CCR1 = 125; break;
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <buzzerControl+0xac>)
 800029a:	227d      	movs	r2, #125	; 0x7d
 800029c:	635a      	str	r2, [r3, #52]	; 0x34
 800029e:	e035      	b.n	800030c <buzzerControl+0xa4>
		case buzz_long:
			for(int idx = 0; idx < count; idx++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e010      	b.n	80002c8 <buzzerControl+0x60>
			{
				TIM3->CCR1 = 125;
 80002a6:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <buzzerControl+0xac>)
 80002a8:	227d      	movs	r2, #125	; 0x7d
 80002aa:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(2000);
 80002ac:	23fa      	movs	r3, #250	; 0xfa
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 feab 	bl	800100c <HAL_Delay>
				TIM3->CCR1 = 0;
 80002b6:	4b17      	ldr	r3, [pc, #92]	; (8000314 <buzzerControl+0xac>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(10);
 80002bc:	200a      	movs	r0, #10
 80002be:	f000 fea5 	bl	800100c <HAL_Delay>
			for(int idx = 0; idx < count; idx++)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	3301      	adds	r3, #1
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	dbea      	blt.n	80002a6 <buzzerControl+0x3e>
			}

		break;
 80002d0:	e01c      	b.n	800030c <buzzerControl+0xa4>
		case buzz_short:
			for(int idx = 0; idx < count; idx++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	e010      	b.n	80002fa <buzzerControl+0x92>
			{
				TIM3->CCR1 = 125;
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <buzzerControl+0xac>)
 80002da:	227d      	movs	r2, #125	; 0x7d
 80002dc:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(300);
 80002de:	2396      	movs	r3, #150	; 0x96
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fe92 	bl	800100c <HAL_Delay>
				TIM3->CCR1 = 0;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <buzzerControl+0xac>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(100);
 80002ee:	2064      	movs	r0, #100	; 0x64
 80002f0:	f000 fe8c 	bl	800100c <HAL_Delay>
			for(int idx = 0; idx < count; idx++)
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	3301      	adds	r3, #1
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68ba      	ldr	r2, [r7, #8]
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	429a      	cmp	r2, r3
 8000300:	dbea      	blt.n	80002d8 <buzzerControl+0x70>
			}
		break;
 8000302:	e003      	b.n	800030c <buzzerControl+0xa4>
		default: TIM3->CCR1 = 0; break;
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <buzzerControl+0xac>)
 8000306:	2200      	movs	r2, #0
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
 800030a:	46c0      	nop			; (mov r8, r8)
	}
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b004      	add	sp, #16
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40000400 	.word	0x40000400

08000318 <ledColor>:

// LED Color Set
void ledColor(eLedColor_t ledColor)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	0002      	movs	r2, r0
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	701a      	strb	r2, [r3, #0]
    switch(ledColor)
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b07      	cmp	r3, #7
 800032a:	d834      	bhi.n	8000396 <ledColor+0x7e>
 800032c:	009a      	lsls	r2, r3, #2
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <ledColor+0x94>)
 8000330:	18d3      	adds	r3, r2, r3
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	469f      	mov	pc, r3
    {
        case color_none:
            ledControl(led_off, led_off, led_off); break;
 8000336:	2201      	movs	r2, #1
 8000338:	2101      	movs	r1, #1
 800033a:	2001      	movs	r0, #1
 800033c:	f000 f838 	bl	80003b0 <ledControl>
 8000340:	e02f      	b.n	80003a2 <ledColor+0x8a>
        case color_red:
            ledControl(led_on, led_off, led_off); break;
 8000342:	2201      	movs	r2, #1
 8000344:	2101      	movs	r1, #1
 8000346:	2000      	movs	r0, #0
 8000348:	f000 f832 	bl	80003b0 <ledControl>
 800034c:	e029      	b.n	80003a2 <ledColor+0x8a>
        case color_green:
            ledControl(led_off, led_on, led_off); break;
 800034e:	2201      	movs	r2, #1
 8000350:	2100      	movs	r1, #0
 8000352:	2001      	movs	r0, #1
 8000354:	f000 f82c 	bl	80003b0 <ledControl>
 8000358:	e023      	b.n	80003a2 <ledColor+0x8a>
        case color_blue:
            ledControl(led_off, led_off, led_on); break;
 800035a:	2200      	movs	r2, #0
 800035c:	2101      	movs	r1, #1
 800035e:	2001      	movs	r0, #1
 8000360:	f000 f826 	bl	80003b0 <ledControl>
 8000364:	e01d      	b.n	80003a2 <ledColor+0x8a>
        case color_yellow:
            ledControl(led_on, led_on, led_off); break;
 8000366:	2201      	movs	r2, #1
 8000368:	2100      	movs	r1, #0
 800036a:	2000      	movs	r0, #0
 800036c:	f000 f820 	bl	80003b0 <ledControl>
 8000370:	e017      	b.n	80003a2 <ledColor+0x8a>
        case color_magenta:
            ledControl(led_on, led_off, led_on); break;
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	2000      	movs	r0, #0
 8000378:	f000 f81a 	bl	80003b0 <ledControl>
 800037c:	e011      	b.n	80003a2 <ledColor+0x8a>
        case color_cyan:
            ledControl(led_off, led_on, led_on); break;
 800037e:	2200      	movs	r2, #0
 8000380:	2100      	movs	r1, #0
 8000382:	2001      	movs	r0, #1
 8000384:	f000 f814 	bl	80003b0 <ledControl>
 8000388:	e00b      	b.n	80003a2 <ledColor+0x8a>
        case color_white:
            ledControl(led_on, led_on, led_on); break;
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	2000      	movs	r0, #0
 8000390:	f000 f80e 	bl	80003b0 <ledControl>
 8000394:	e005      	b.n	80003a2 <ledColor+0x8a>
        default:
            ledControl(led_off, led_off, led_off); break;
 8000396:	2201      	movs	r2, #1
 8000398:	2101      	movs	r1, #1
 800039a:	2001      	movs	r0, #1
 800039c:	f000 f808 	bl	80003b0 <ledControl>
 80003a0:	46c0      	nop			; (mov r8, r8)
    }
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b002      	add	sp, #8
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	08002f78 	.word	0x08002f78

080003b0 <ledControl>:

// LED Control
void ledControl(eLedStatus_t led_r, eLedStatus_t led_g, eLedStatus_t led_b)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	0004      	movs	r4, r0
 80003b8:	0008      	movs	r0, r1
 80003ba:	0011      	movs	r1, r2
 80003bc:	1dfb      	adds	r3, r7, #7
 80003be:	1c22      	adds	r2, r4, #0
 80003c0:	701a      	strb	r2, [r3, #0]
 80003c2:	1dbb      	adds	r3, r7, #6
 80003c4:	1c02      	adds	r2, r0, #0
 80003c6:	701a      	strb	r2, [r3, #0]
 80003c8:	1d7b      	adds	r3, r7, #5
 80003ca:	1c0a      	adds	r2, r1, #0
 80003cc:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, led_r);
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	781a      	ldrb	r2, [r3, #0]
 80003d2:	2380      	movs	r3, #128	; 0x80
 80003d4:	0099      	lsls	r1, r3, #2
 80003d6:	2390      	movs	r3, #144	; 0x90
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fac1 	bl	8001962 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, led_g);
 80003e0:	1dbb      	adds	r3, r7, #6
 80003e2:	781a      	ldrb	r2, [r3, #0]
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	0059      	lsls	r1, r3, #1
 80003e8:	2390      	movs	r3, #144	; 0x90
 80003ea:	05db      	lsls	r3, r3, #23
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fab8 	bl	8001962 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, led_b);
 80003f2:	1d7b      	adds	r3, r7, #5
 80003f4:	781a      	ldrb	r2, [r3, #0]
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	00d9      	lsls	r1, r3, #3
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 faaf 	bl	8001962 <HAL_GPIO_WritePin>
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b003      	add	sp, #12
 800040a:	bd90      	pop	{r4, r7, pc}

0800040c <boostEnable>:

void boostEnable(GPIO_PinState bstStatus)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	0002      	movs	r2, r0
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(BST_EN_GPIO_Port, BST_EN_Pin, bstStatus);
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	2390      	movs	r3, #144	; 0x90
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	2140      	movs	r1, #64	; 0x40
 8000422:	0018      	movs	r0, r3
 8000424:	f001 fa9d 	bl	8001962 <HAL_GPIO_WritePin>
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}

08000430 <deviceInit>:
/**************************************************************************************/

/* Application ************************************************************************/
// LED ROTATE 100ms
void deviceInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
    // GPIO ALL OFF
    HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_RESET); //AMP OFF
 8000434:	2390      	movs	r3, #144	; 0x90
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fa90 	bl	8001962 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BST_EN_GPIO_Port, BST_EN_Pin, GPIO_PIN_RESET); // BOOSTER OFF
 8000442:	2390      	movs	r3, #144	; 0x90
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	2200      	movs	r2, #0
 8000448:	2140      	movs	r1, #64	; 0x40
 800044a:	0018      	movs	r0, r3
 800044c:	f001 fa89 	bl	8001962 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_CHG_GPIO_Port, LED_CHG_Pin, GPIO_PIN_RESET); // CHG LED OFF
 8000450:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <deviceInit+0xb0>)
 8000452:	2200      	movs	r2, #0
 8000454:	2102      	movs	r1, #2
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fa83 	bl	8001962 <HAL_GPIO_WritePin>

    // PWM START
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);    // Buzzer PWM
 800045c:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <deviceInit+0xb4>)
 800045e:	2100      	movs	r1, #0
 8000460:	0018      	movs	r0, r3
 8000462:	f001 ff8f 	bl	8002384 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// FAN PWM
 8000466:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <deviceInit+0xb8>)
 8000468:	2100      	movs	r1, #0
 800046a:	0018      	movs	r0, r3
 800046c:	f001 ff8a 	bl	8002384 <HAL_TIM_PWM_Start>

    // PWM Init
    pwmDutySet(0);
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff fed5 	bl	8000220 <pwmDutySet>
    buzzerControl(buzz_off, 0);
 8000476:	2100      	movs	r1, #0
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff fef5 	bl	8000268 <buzzerControl>

    // LED Initial
    // RED
    ledColor(color_red);
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff ff4a 	bl	8000318 <ledColor>
    HAL_Delay(250);
 8000484:	20fa      	movs	r0, #250	; 0xfa
 8000486:	f000 fdc1 	bl	800100c <HAL_Delay>
    // GRN
    ledColor(color_green);
 800048a:	2002      	movs	r0, #2
 800048c:	f7ff ff44 	bl	8000318 <ledColor>
    HAL_Delay(250);
 8000490:	20fa      	movs	r0, #250	; 0xfa
 8000492:	f000 fdbb 	bl	800100c <HAL_Delay>
    // BLU
    ledColor(color_blue);
 8000496:	2003      	movs	r0, #3
 8000498:	f7ff ff3e 	bl	8000318 <ledColor>
    HAL_Delay(250);
 800049c:	20fa      	movs	r0, #250	; 0xfa
 800049e:	f000 fdb5 	bl	800100c <HAL_Delay>
    // YEL
    ledColor(color_yellow);
 80004a2:	2004      	movs	r0, #4
 80004a4:	f7ff ff38 	bl	8000318 <ledColor>
    HAL_Delay(250);
 80004a8:	20fa      	movs	r0, #250	; 0xfa
 80004aa:	f000 fdaf 	bl	800100c <HAL_Delay>
    // MAGENTA
    ledColor(color_magenta);
 80004ae:	2005      	movs	r0, #5
 80004b0:	f7ff ff32 	bl	8000318 <ledColor>
    HAL_Delay(250);
 80004b4:	20fa      	movs	r0, #250	; 0xfa
 80004b6:	f000 fda9 	bl	800100c <HAL_Delay>
    // CYAN
    ledColor(color_cyan);
 80004ba:	2006      	movs	r0, #6
 80004bc:	f7ff ff2c 	bl	8000318 <ledColor>
    HAL_Delay(250);
 80004c0:	20fa      	movs	r0, #250	; 0xfa
 80004c2:	f000 fda3 	bl	800100c <HAL_Delay>
    // WHT
    ledColor(color_white);
 80004c6:	2007      	movs	r0, #7
 80004c8:	f7ff ff26 	bl	8000318 <ledColor>
    HAL_Delay(250);
 80004cc:	20fa      	movs	r0, #250	; 0xfa
 80004ce:	f000 fd9d 	bl	800100c <HAL_Delay>
    // LED ALL OFF
    ledColor(color_none);
 80004d2:	2000      	movs	r0, #0
 80004d4:	f7ff ff20 	bl	8000318 <ledColor>
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	48001400 	.word	0x48001400
 80004e4:	2000006c 	.word	0x2000006c
 80004e8:	200000b4 	.word	0x200000b4

080004ec <readSwitchStatus>:

void readSwitchStatus(int	* const status_count,
					  bool	* const mode_change,
					  int	* const befor_mode)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
    int time_count = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
    // sratus_count = 2 : System Active Mode    (FAN 65%, )
    // sratus_count = 3 : System Active Mode    (FAN 80%, )
    // sratus_count = 4 : System Active Mode    (FAN 100%, )

    // Switch Detect
    if(HAL_GPIO_ReadPin(FAN_SW_GPIO_Port, FAN_SW_Pin) == 0)
 80004fc:	4b23      	ldr	r3, [pc, #140]	; (800058c <readSwitchStatus+0xa0>)
 80004fe:	2101      	movs	r1, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f001 fa11 	bl	8001928 <HAL_GPIO_ReadPin>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d10d      	bne.n	8000526 <readSwitchStatus+0x3a>
    {
        // Switch Detect Time Count
        while(HAL_GPIO_ReadPin(FAN_SW_GPIO_Port, FAN_SW_Pin) == 0)
 800050a:	e005      	b.n	8000518 <readSwitchStatus+0x2c>
        {
            time_count++;
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
            HAL_Delay(100);
 8000512:	2064      	movs	r0, #100	; 0x64
 8000514:	f000 fd7a 	bl	800100c <HAL_Delay>
        while(HAL_GPIO_ReadPin(FAN_SW_GPIO_Port, FAN_SW_Pin) == 0)
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <readSwitchStatus+0xa0>)
 800051a:	2101      	movs	r1, #1
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fa03 	bl	8001928 <HAL_GPIO_ReadPin>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d0f2      	beq.n	800050c <readSwitchStatus+0x20>
        }
    }

    // Switch Detect Time Check
    // System Mode Cheange Detect
    if(time_count >= 15)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	2b0e      	cmp	r3, #14
 800052a:	dd0b      	ble.n	8000544 <readSwitchStatus+0x58>
    {
        // if System StandBy Status
        if(*status_count == 0)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d103      	bne.n	800053c <readSwitchStatus+0x50>
        {
            *status_count = 1; // Mode Change
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e016      	b.n	800056a <readSwitchStatus+0x7e>
        }
        // System Active Status
        else
        {
            *status_count = 0; // Mode Change
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	e012      	b.n	800056a <readSwitchStatus+0x7e>
        }
    }
    // System Status Cheange Detect
    else if((time_count < 20) && (time_count > 0))
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	2b13      	cmp	r3, #19
 8000548:	dc0f      	bgt.n	800056a <readSwitchStatus+0x7e>
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	2b00      	cmp	r3, #0
 800054e:	dd0c      	ble.n	800056a <readSwitchStatus+0x7e>
    {
        if(*status_count >= 4)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b03      	cmp	r3, #3
 8000556:	dd03      	ble.n	8000560 <readSwitchStatus+0x74>
        {
            *status_count = 2;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2202      	movs	r2, #2
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	e004      	b.n	800056a <readSwitchStatus+0x7e>
        }
        else
        {
            *status_count+=1;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	601a      	str	r2, [r3, #0]
    else
    {
        /* none */
    }

    if(*befor_mode != *status_count)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	429a      	cmp	r2, r3
 8000574:	d006      	beq.n	8000584 <readSwitchStatus+0x98>
    {
    	*mode_change = true;
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
    	*befor_mode = *status_count;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
    }
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b006      	add	sp, #24
 800058a:	bd80      	pop	{r7, pc}
 800058c:	48001400 	.word	0x48001400

08000590 <fanControl>:

// FAN Control
void fanControl(int     * const status,
				bool	* const mode_status)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
    switch (*status)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d900      	bls.n	80005a4 <fanControl+0x14>
 80005a2:	e08f      	b.n	80006c4 <fanControl+0x134>
 80005a4:	009a      	lsls	r2, r3, #2
 80005a6:	4b49      	ldr	r3, [pc, #292]	; (80006cc <fanControl+0x13c>)
 80005a8:	18d3      	adds	r3, r2, r3
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	469f      	mov	pc, r3
    {
        case 0: // Device Off
        	ledColor(color_none);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff feb2 	bl	8000318 <ledColor>
        	boostEnable(GPIO_PIN_RESET);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff ff29 	bl	800040c <boostEnable>
        	HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_RESET);
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2200      	movs	r2, #0
 80005c0:	2120      	movs	r1, #32
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 f9cd 	bl	8001962 <HAL_GPIO_WritePin>
        	pwmDutySet(0);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff fe29 	bl	8000220 <pwmDutySet>
        	if(*mode_status == true)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d06f      	beq.n	80006b6 <fanControl+0x126>
        	{
        		buzzerControl(buzz_long, 1);
 80005d6:	2101      	movs	r1, #1
 80005d8:	2002      	movs	r0, #2
 80005da:	f7ff fe45 	bl	8000268 <buzzerControl>
        		*mode_status = false;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
        	}
        	break;
 80005e4:	e067      	b.n	80006b6 <fanControl+0x126>
        case 1: // Device Start
            ledColor(color_green);
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff fe96 	bl	8000318 <ledColor>
            if(*mode_status == true)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d006      	beq.n	8000602 <fanControl+0x72>
            {
                buzzerControl(buzz_long, 1);
 80005f4:	2101      	movs	r1, #1
 80005f6:	2002      	movs	r0, #2
 80005f8:	f7ff fe36 	bl	8000268 <buzzerControl>
                *mode_status = false;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
            }
            *status+=1;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	601a      	str	r2, [r3, #0]
            break;
 800060c:	e05a      	b.n	80006c4 <fanControl+0x134>
        case 2: // PWM 30%
            ledColor(color_green);
 800060e:	2002      	movs	r0, #2
 8000610:	f7ff fe82 	bl	8000318 <ledColor>
            boostEnable(GPIO_PIN_SET);
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff fef9 	bl	800040c <boostEnable>
            HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_SET);
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2201      	movs	r2, #1
 8000620:	2120      	movs	r1, #32
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f99d 	bl	8001962 <HAL_GPIO_WritePin>
            pwmDutySet(50);
 8000628:	2032      	movs	r0, #50	; 0x32
 800062a:	f7ff fdf9 	bl	8000220 <pwmDutySet>
            if(*mode_status == true)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d041      	beq.n	80006ba <fanControl+0x12a>
            {
            	buzzerControl(buzz_short, 1);
 8000636:	2101      	movs	r1, #1
 8000638:	2003      	movs	r0, #3
 800063a:	f7ff fe15 	bl	8000268 <buzzerControl>
            	*mode_status = false;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000644:	e039      	b.n	80006ba <fanControl+0x12a>
        case 3: // PWM 50%
            ledColor(color_green);
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff fe66 	bl	8000318 <ledColor>
            boostEnable(GPIO_PIN_SET);
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff fedd 	bl	800040c <boostEnable>
            HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_SET);
 8000652:	2390      	movs	r3, #144	; 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2201      	movs	r2, #1
 8000658:	2120      	movs	r1, #32
 800065a:	0018      	movs	r0, r3
 800065c:	f001 f981 	bl	8001962 <HAL_GPIO_WritePin>
            pwmDutySet(80);
 8000660:	2050      	movs	r0, #80	; 0x50
 8000662:	f7ff fddd 	bl	8000220 <pwmDutySet>
            if(*mode_status == true)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d027      	beq.n	80006be <fanControl+0x12e>
            {
            	buzzerControl(buzz_short, 2);
 800066e:	2102      	movs	r1, #2
 8000670:	2003      	movs	r0, #3
 8000672:	f7ff fdf9 	bl	8000268 <buzzerControl>
            	*mode_status = false;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800067c:	e01f      	b.n	80006be <fanControl+0x12e>
        case 4: // PWM 80%
            ledColor(color_green);
 800067e:	2002      	movs	r0, #2
 8000680:	f7ff fe4a 	bl	8000318 <ledColor>
            boostEnable(GPIO_PIN_SET);
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff fec1 	bl	800040c <boostEnable>
            HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_SET);
 800068a:	2390      	movs	r3, #144	; 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2201      	movs	r2, #1
 8000690:	2120      	movs	r1, #32
 8000692:	0018      	movs	r0, r3
 8000694:	f001 f965 	bl	8001962 <HAL_GPIO_WritePin>
            pwmDutySet(100);
 8000698:	2064      	movs	r0, #100	; 0x64
 800069a:	f7ff fdc1 	bl	8000220 <pwmDutySet>
            if(*mode_status == true)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00d      	beq.n	80006c2 <fanControl+0x132>
            {
            	buzzerControl(buzz_short, 3);
 80006a6:	2103      	movs	r1, #3
 80006a8:	2003      	movs	r0, #3
 80006aa:	f7ff fddd 	bl	8000268 <buzzerControl>
            	*mode_status = false;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80006b4:	e005      	b.n	80006c2 <fanControl+0x132>
        	break;
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	e004      	b.n	80006c4 <fanControl+0x134>
            break;
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	e002      	b.n	80006c4 <fanControl+0x134>
            break;
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	e000      	b.n	80006c4 <fanControl+0x134>
            break;
 80006c2:	46c0      	nop			; (mov r8, r8)
    }
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08002f98 	.word	0x08002f98

080006d0 <ampControl>:

// Amp Control
void ampControl(const int status)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	int ampSWstat = HAL_GPIO_ReadPin(AMP_SW_GPIO_Port,AMP_SW_Pin);
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <ampControl+0x90>)
 80006da:	2101      	movs	r1, #1
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 f923 	bl	8001928 <HAL_GPIO_ReadPin>
 80006e2:	0003      	movs	r3, r0
 80006e4:	60fb      	str	r3, [r7, #12]

    if(status > 0)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	dd29      	ble.n	8000740 <ampControl+0x70>
    {
        if(ampSWstat == 0)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10f      	bne.n	8000712 <ampControl+0x42>
        {
            while(ampSWstat == 0);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0fc      	beq.n	80006f2 <ampControl+0x22>
            ampModeCount++;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <ampControl+0x94>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <ampControl+0x94>)
 8000702:	701a      	strb	r2, [r3, #0]
            if(ampModeCount >= 2) ampModeCount = 0;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <ampControl+0x94>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d902      	bls.n	8000712 <ampControl+0x42>
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <ampControl+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
        }

        switch (ampModeCount)
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <ampControl+0x94>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <ampControl+0x50>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d008      	beq.n	8000730 <ampControl+0x60>
    else
    {
        ampModeCount = 1;
        HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOff);
    }
}
 800071e:	e01a      	b.n	8000756 <ampControl+0x86>
                HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOn);
 8000720:	2390      	movs	r3, #144	; 0x90
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	2201      	movs	r2, #1
 8000726:	2120      	movs	r1, #32
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f91a 	bl	8001962 <HAL_GPIO_WritePin>
            break;
 800072e:	e012      	b.n	8000756 <ampControl+0x86>
                HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOff);
 8000730:	2390      	movs	r3, #144	; 0x90
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f912 	bl	8001962 <HAL_GPIO_WritePin>
            break;
 800073e:	e00a      	b.n	8000756 <ampControl+0x86>
        ampModeCount = 1;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <ampControl+0x94>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, ampOff);
 8000746:	2390      	movs	r3, #144	; 0x90
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	0018      	movs	r0, r3
 8000750:	f001 f907 	bl	8001962 <HAL_GPIO_WritePin>
}
 8000754:	e7ff      	b.n	8000756 <ampControl+0x86>
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b004      	add	sp, #16
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	48000400 	.word	0x48000400
 8000764:	200000fc 	.word	0x200000fc

08000768 <chargeDetect>:

// Charge Detect
void chargeDetect(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    voltIn = HAL_GPIO_ReadPin(VBUS_DET_GPIO_Port, VBUS_DET_Pin);
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <chargeDetect+0x68>)
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f8d9 	bl	8001928 <HAL_GPIO_ReadPin>
 8000776:	0003      	movs	r3, r0
 8000778:	001a      	movs	r2, r3
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <chargeDetect+0x6c>)
 800077c:	701a      	strb	r2, [r3, #0]
    chgStat = HAL_GPIO_ReadPin(CHG_STAT_GPIO_Port, CHG_STAT_Pin);
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2101      	movs	r1, #1
 8000784:	0018      	movs	r0, r3
 8000786:	f001 f8cf 	bl	8001928 <HAL_GPIO_ReadPin>
 800078a:	0003      	movs	r3, r0
 800078c:	001a      	movs	r2, r3
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <chargeDetect+0x70>)
 8000790:	701a      	strb	r2, [r3, #0]

    if(voltIn == 1)
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <chargeDetect+0x6c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d111      	bne.n	80007be <chargeDetect+0x56>
    {
        if (chgStat == 0)
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <chargeDetect+0x70>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d106      	bne.n	80007b0 <chargeDetect+0x48>
        {
            HAL_GPIO_WritePin(LED_CHG_GPIO_Port, LED_CHG_Pin, GPIO_PIN_SET);
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <chargeDetect+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	2102      	movs	r1, #2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 f8da 	bl	8001962 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(LED_CHG_GPIO_Port,LED_CHG_Pin,GPIO_PIN_RESET);
    }
}
 80007ae:	e00c      	b.n	80007ca <chargeDetect+0x62>
            HAL_GPIO_WritePin(LED_CHG_GPIO_Port, LED_CHG_Pin, GPIO_PIN_RESET);
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <chargeDetect+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 f8d3 	bl	8001962 <HAL_GPIO_WritePin>
}
 80007bc:	e005      	b.n	80007ca <chargeDetect+0x62>
        HAL_GPIO_WritePin(LED_CHG_GPIO_Port,LED_CHG_Pin,GPIO_PIN_RESET);
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <chargeDetect+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	2102      	movs	r1, #2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 f8cc 	bl	8001962 <HAL_GPIO_WritePin>
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	48000400 	.word	0x48000400
 80007d4:	200000fd 	.word	0x200000fd
 80007d8:	20000000 	.word	0x20000000
 80007dc:	48001400 	.word	0x48001400

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int system_status = 0; // System Status Variable
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  bool mode_status = false;
 80007ea:	230b      	movs	r3, #11
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
  int befor_mode = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 fba5 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f825 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f000 f991 	bl	8000b24 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000802:	f000 f8c3 	bl	800098c <MX_TIM3_Init>
  MX_TIM14_Init();
 8000806:	f000 f93f 	bl	8000a88 <MX_TIM14_Init>
  MX_ADC_Init();
 800080a:	f000 f863 	bl	80008d4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  deviceInit(); // Device Initial
 800080e:	f7ff fe0f 	bl	8000430 <deviceInit>
  HAL_Delay(50);
 8000812:	2032      	movs	r0, #50	; 0x32
 8000814:	f000 fbfa 	bl	800100c <HAL_Delay>
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        chargeDetect();
 8000818:	f7ff ffa6 	bl	8000768 <chargeDetect>
        readSwitchStatus(&system_status,
 800081c:	1d3a      	adds	r2, r7, #4
 800081e:	240b      	movs	r4, #11
 8000820:	1939      	adds	r1, r7, r4
 8000822:	250c      	movs	r5, #12
 8000824:	197b      	adds	r3, r7, r5
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fe60 	bl	80004ec <readSwitchStatus>
        				 &mode_status,
						 &befor_mode);
        fanControl(&system_status, &mode_status);
 800082c:	193a      	adds	r2, r7, r4
 800082e:	197b      	adds	r3, r7, r5
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff feac 	bl	8000590 <fanControl>
        ampControl(system_status);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff ff48 	bl	80006d0 <ampControl>
    	boostEnable(GPIO_PIN_SET);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fde3 	bl	800040c <boostEnable>
        chargeDetect();
 8000846:	e7e7      	b.n	8000818 <main+0x38>

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b091      	sub	sp, #68	; 0x44
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	2410      	movs	r4, #16
 8000850:	193b      	adds	r3, r7, r4
 8000852:	0018      	movs	r0, r3
 8000854:	2330      	movs	r3, #48	; 0x30
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f002 fb69 	bl	8002f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085e:	003b      	movs	r3, r7
 8000860:	0018      	movs	r0, r3
 8000862:	2310      	movs	r3, #16
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f002 fb62 	bl	8002f30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800086c:	0021      	movs	r1, r4
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2212      	movs	r2, #18
 8000872:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2201      	movs	r2, #1
 800087e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2210      	movs	r2, #16
 8000884:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2210      	movs	r2, #16
 800088a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	187b      	adds	r3, r7, r1
 8000894:	0018      	movs	r0, r3
 8000896:	f001 f881 	bl	800199c <HAL_RCC_OscConfig>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800089e:	f000 f9fb 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	003b      	movs	r3, r7
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	003b      	movs	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b4:	003b      	movs	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ba:	003b      	movs	r3, r7
 80008bc:	2100      	movs	r1, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fb86 	bl	8001fd0 <HAL_RCC_ClockConfig>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008c8:	f000 f9e6 	bl	8000c98 <Error_Handler>
  }
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b011      	add	sp, #68	; 0x44
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	0018      	movs	r0, r3
 80008de:	230c      	movs	r3, #12
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f002 fb24 	bl	8002f30 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <MX_ADC_Init+0xb0>)
 80008ea:	4a27      	ldr	r2, [pc, #156]	; (8000988 <MX_ADC_Init+0xb4>)
 80008ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_ADC_Init+0xb0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_ADC_Init+0xb0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_ADC_Init+0xb0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_ADC_Init+0xb0>)
 8000902:	2201      	movs	r2, #1
 8000904:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_ADC_Init+0xb0>)
 8000908:	2204      	movs	r2, #4
 800090a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_ADC_Init+0xb0>)
 800090e:	2200      	movs	r2, #0
 8000910:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_ADC_Init+0xb0>)
 8000914:	2200      	movs	r2, #0
 8000916:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_ADC_Init+0xb0>)
 800091a:	2200      	movs	r2, #0
 800091c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_ADC_Init+0xb0>)
 8000920:	2200      	movs	r2, #0
 8000922:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_ADC_Init+0xb0>)
 8000926:	22c2      	movs	r2, #194	; 0xc2
 8000928:	32ff      	adds	r2, #255	; 0xff
 800092a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_ADC_Init+0xb0>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_ADC_Init+0xb0>)
 8000934:	2224      	movs	r2, #36	; 0x24
 8000936:	2100      	movs	r1, #0
 8000938:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_ADC_Init+0xb0>)
 800093c:	2201      	movs	r2, #1
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_ADC_Init+0xb0>)
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fb86 	bl	8001054 <HAL_ADC_Init>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f9a4 	bl	8000c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2207      	movs	r2, #7
 8000954:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	0152      	lsls	r2, r2, #5
 800095c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0552      	lsls	r2, r2, #21
 8000964:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000966:	1d3a      	adds	r2, r7, #4
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_ADC_Init+0xb0>)
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fcb1 	bl	80012d4 <HAL_ADC_ConfigChannel>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000976:	f000 f98f 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	2000002c 	.word	0x2000002c
 8000988:	40012400 	.word	0x40012400

0800098c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	2328      	movs	r3, #40	; 0x28
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	0018      	movs	r0, r3
 8000998:	2310      	movs	r3, #16
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f002 fac7 	bl	8002f30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	2320      	movs	r3, #32
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	0018      	movs	r0, r3
 80009a8:	2308      	movs	r3, #8
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f002 fabf 	bl	8002f30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	0018      	movs	r0, r3
 80009b6:	231c      	movs	r3, #28
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f002 fab8 	bl	8002f30 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c0:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <MX_TIM3_Init+0xf4>)
 80009c2:	4a30      	ldr	r2, [pc, #192]	; (8000a84 <MX_TIM3_Init+0xf8>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <MX_TIM3_Init+0xf4>)
 80009c8:	2209      	movs	r2, #9
 80009ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_TIM3_Init+0xf4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 251;
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <MX_TIM3_Init+0xf4>)
 80009d4:	22fb      	movs	r2, #251	; 0xfb
 80009d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_TIM3_Init+0xf4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_TIM3_Init+0xf4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_TIM3_Init+0xf4>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 fc24 	bl	8002234 <HAL_TIM_Base_Init>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009f0:	f000 f952 	bl	8000c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f4:	2128      	movs	r1, #40	; 0x28
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	0152      	lsls	r2, r2, #5
 80009fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009fe:	187a      	adds	r2, r7, r1
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_TIM3_Init+0xf4>)
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fe2f 	bl	8002668 <HAL_TIM_ConfigClockSource>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a0e:	f000 f943 	bl	8000c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_TIM3_Init+0xf4>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f001 fc5d 	bl	80022d4 <HAL_TIM_PWM_Init>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a1e:	f000 f93b 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2120      	movs	r1, #32
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a30:	187a      	adds	r2, r7, r1
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_TIM3_Init+0xf4>)
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 f9fe 	bl	8002e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000a40:	f000 f92a 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2260      	movs	r2, #96	; 0x60
 8000a48:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 125;
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	227d      	movs	r2, #125	; 0x7d
 8000a4e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5c:	1d39      	adds	r1, r7, #4
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_TIM3_Init+0xf4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fd3a 	bl	80024dc <HAL_TIM_PWM_ConfigChannel>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000a6c:	f000 f914 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <MX_TIM3_Init+0xf4>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f9b4 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b00e      	add	sp, #56	; 0x38
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000006c 	.word	0x2000006c
 8000a84:	40000400 	.word	0x40000400

08000a88 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	0018      	movs	r0, r3
 8000a92:	231c      	movs	r3, #28
 8000a94:	001a      	movs	r2, r3
 8000a96:	2100      	movs	r1, #0
 8000a98:	f002 fa4a 	bl	8002f30 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <MX_TIM14_Init+0x98>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 3;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000ab0:	2263      	movs	r2, #99	; 0x63
 8000ab2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 fbb6 	bl	8002234 <HAL_TIM_Base_Init>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000acc:	f000 f8e4 	bl	8000c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 fbfe 	bl	80022d4 <HAL_TIM_PWM_Init>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000adc:	f000 f8dc 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2260      	movs	r2, #96	; 0x60
 8000ae4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af8:	1d39      	adds	r1, r7, #4
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fcec 	bl	80024dc <HAL_TIM_PWM_ConfigChannel>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000b08:	f000 f8c6 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <MX_TIM14_Init+0x94>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f966 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b008      	add	sp, #32
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000b4 	.word	0x200000b4
 8000b20:	40002000 	.word	0x40002000

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	240c      	movs	r4, #12
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2314      	movs	r3, #20
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	f002 f9fb 	bl	8002f30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3a:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	03c9      	lsls	r1, r1, #15
 8000b44:	430a      	orrs	r2, r1
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	4b50      	ldr	r3, [pc, #320]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b4a:	695a      	ldr	r2, [r3, #20]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	03db      	lsls	r3, r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	4b4c      	ldr	r3, [pc, #304]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0289      	lsls	r1, r1, #10
 8000b60:	430a      	orrs	r2, r1
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b66:	695a      	ldr	r2, [r3, #20]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	029b      	lsls	r3, r3, #10
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	02c9      	lsls	r1, r1, #11
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <MX_GPIO_Init+0x168>)
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	02db      	lsls	r3, r3, #11
 8000b88:	4013      	ands	r3, r2
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CHG_GPIO_Port, LED_CHG_Pin, GPIO_PIN_RESET);
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <MX_GPIO_Init+0x16c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	2102      	movs	r1, #2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fee4 	bl	8001962 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_SD_GPIO_Port, AMP_SD_Pin, GPIO_PIN_SET);
 8000b9a:	2390      	movs	r3, #144	; 0x90
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 fedd 	bl	8001962 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BST_EN_Pin|LED_G_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000ba8:	23e8      	movs	r3, #232	; 0xe8
 8000baa:	00d9      	lsls	r1, r3, #3
 8000bac:	2390      	movs	r3, #144	; 0x90
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fed5 	bl	8001962 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FAN_SW_Pin */
  GPIO_InitStruct.Pin = FAN_SW_Pin;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FAN_SW_GPIO_Port, &GPIO_InitStruct);
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <MX_GPIO_Init+0x16c>)
 8000bce:	0019      	movs	r1, r3
 8000bd0:	0010      	movs	r0, r2
 8000bd2:	f000 fd41 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CHG_Pin */
  GPIO_InitStruct.Pin = LED_CHG_Pin;
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	2202      	movs	r2, #2
 8000bda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2201      	movs	r2, #1
 8000be0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_CHG_GPIO_Port, &GPIO_InitStruct);
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <MX_GPIO_Init+0x16c>)
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	0010      	movs	r0, r2
 8000bf6:	f000 fd2f 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_STAT_Pin */
  GPIO_InitStruct.Pin = CHG_STAT_Pin;
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	2201      	movs	r2, #1
 8000c0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHG_STAT_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	193a      	adds	r2, r7, r4
 8000c0e:	2390      	movs	r3, #144	; 0x90
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 fd1f 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_SD_Pin BST_EN_Pin LED_G_Pin LED_R_Pin
                           LED_B_Pin */
  GPIO_InitStruct.Pin = AMP_SD_Pin|BST_EN_Pin|LED_G_Pin|LED_R_Pin
 8000c1a:	0021      	movs	r1, r4
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	22ec      	movs	r2, #236	; 0xec
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	601a      	str	r2, [r3, #0]
                          |LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	000c      	movs	r4, r1
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2201      	movs	r2, #1
 8000c2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	193a      	adds	r2, r7, r4
 8000c3a:	2390      	movs	r3, #144	; 0x90
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 fd09 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_SW_Pin */
  GPIO_InitStruct.Pin = AMP_SW_Pin;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2201      	movs	r2, #1
 8000c56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AMP_SW_GPIO_Port, &GPIO_InitStruct);
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <MX_GPIO_Init+0x170>)
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0010      	movs	r0, r2
 8000c60:	f000 fcfa 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DET_Pin */
  GPIO_InitStruct.Pin = VBUS_DET_Pin;
 8000c64:	0021      	movs	r1, r4
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(VBUS_DET_GPIO_Port, &GPIO_InitStruct);
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <MX_GPIO_Init+0x170>)
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	0010      	movs	r0, r2
 8000c80:	f000 fcea 	bl	8001658 <HAL_GPIO_Init>

}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b009      	add	sp, #36	; 0x24
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	48001400 	.word	0x48001400
 8000c94:	48000400 	.word	0x48000400

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	619a      	str	r2, [r3, #24]
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc4:	69da      	ldr	r2, [r3, #28]
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0549      	lsls	r1, r1, #21
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	61da      	str	r2, [r3, #28]
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cd2:	69da      	ldr	r2, [r3, #28]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	055b      	lsls	r3, r3, #21
 8000cd8:	4013      	ands	r3, r2
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b08b      	sub	sp, #44	; 0x2c
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	2414      	movs	r4, #20
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	2314      	movs	r3, #20
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f002 f916 	bl	8002f30 <memset>
  if(hadc->Instance==ADC1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_ADC_MspInit+0x84>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d12b      	bne.n	8000d66 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_ADC_MspInit+0x88>)
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_ADC_MspInit+0x88>)
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	0089      	lsls	r1, r1, #2
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	619a      	str	r2, [r3, #24]
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_ADC_MspInit+0x88>)
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_ADC_MspInit+0x88>)
 8000d2c:	695a      	ldr	r2, [r3, #20]
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_ADC_MspInit+0x88>)
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	0289      	lsls	r1, r1, #10
 8000d34:	430a      	orrs	r2, r1
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_ADC_MspInit+0x88>)
 8000d3a:	695a      	ldr	r2, [r3, #20]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	029b      	lsls	r3, r3, #10
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = VBAT_DET_Pin;
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2203      	movs	r2, #3
 8000d50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_DET_GPIO_Port, &GPIO_InitStruct);
 8000d58:	193a      	adds	r2, r7, r4
 8000d5a:	2390      	movs	r3, #144	; 0x90
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	0011      	movs	r1, r2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fc79 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b00b      	add	sp, #44	; 0x2c
 8000d6c:	bd90      	pop	{r4, r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40012400 	.word	0x40012400
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_TIM_Base_MspInit+0x5c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10c      	bne.n	8000da4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_TIM_Base_MspInit+0x60>)
 8000d8c:	69da      	ldr	r2, [r3, #28]
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_TIM_Base_MspInit+0x60>)
 8000d90:	2102      	movs	r1, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	61da      	str	r2, [r3, #28]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_TIM_Base_MspInit+0x60>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000da2:	e012      	b.n	8000dca <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM14)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <HAL_TIM_Base_MspInit+0x64>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d10d      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_TIM_Base_MspInit+0x60>)
 8000db0:	69da      	ldr	r2, [r3, #28]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_TIM_Base_MspInit+0x60>)
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	0049      	lsls	r1, r1, #1
 8000db8:	430a      	orrs	r2, r1
 8000dba:	61da      	str	r2, [r3, #28]
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_TIM_Base_MspInit+0x60>)
 8000dbe:	69da      	ldr	r2, [r3, #28]
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40000400 	.word	0x40000400
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40002000 	.word	0x40002000

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b08b      	sub	sp, #44	; 0x2c
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	2414      	movs	r4, #20
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	0018      	movs	r0, r3
 8000dee:	2314      	movs	r3, #20
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f002 f89c 	bl	8002f30 <memset>
  if(htim->Instance==TIM3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <HAL_TIM_MspPostInit+0xc8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d124      	bne.n	8000e4c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_TIM_MspPostInit+0xcc>)
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <HAL_TIM_MspPostInit+0xcc>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	02c9      	lsls	r1, r1, #11
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_TIM_MspPostInit+0xcc>)
 8000e12:	695a      	ldr	r2, [r3, #20]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	02db      	lsls	r3, r3, #11
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e1e:	0021      	movs	r1, r4
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2210      	movs	r2, #16
 8000e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2202      	movs	r2, #2
 8000e2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <HAL_TIM_MspPostInit+0xd0>)
 8000e42:	0019      	movs	r1, r3
 8000e44:	0010      	movs	r0, r2
 8000e46:	f000 fc07 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000e4a:	e028      	b.n	8000e9e <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM14)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <HAL_TIM_MspPostInit+0xd4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d123      	bne.n	8000e9e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_TIM_MspPostInit+0xcc>)
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_TIM_MspPostInit+0xcc>)
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	02c9      	lsls	r1, r1, #11
 8000e60:	430a      	orrs	r2, r1
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_TIM_MspPostInit+0xcc>)
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	02db      	lsls	r3, r3, #11
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e72:	2114      	movs	r1, #20
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2202      	movs	r2, #2
 8000e78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_TIM_MspPostInit+0xd0>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f000 fbdd 	bl	8001658 <HAL_GPIO_Init>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b00b      	add	sp, #44	; 0x2c
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	40002000 	.word	0x40002000

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f87a 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopForever+0xe>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopForever+0x16>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f1a:	f7ff ffe4 	bl	8000ee6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f1e:	f001 ffe3 	bl	8002ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f22:	f7ff fc5d 	bl	80007e0 <main>

08000f26 <LoopForever>:

LoopForever:
    b LoopForever
 8000f26:	e7fe      	b.n	8000f26 <LoopForever>
  ldr   r0, =_estack
 8000f28:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f34:	08002fc4 	.word	0x08002fc4
  ldr r2, =_sbss
 8000f38:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f3c:	20000104 	.word	0x20000104

08000f40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_IRQHandler>
	...

08000f44 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_Init+0x24>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_Init+0x24>)
 8000f4e:	2110      	movs	r1, #16
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f809 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5a:	f7ff fea3 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40022000 	.word	0x40022000

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000f76:	681c      	ldr	r4, [r3, #0]
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_InitTick+0x60>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	23fa      	movs	r3, #250	; 0xfa
 8000f80:	0098      	lsls	r0, r3, #2
 8000f82:	f7ff f8c1 	bl	8000108 <__udivsi3>
 8000f86:	0003      	movs	r3, r0
 8000f88:	0019      	movs	r1, r3
 8000f8a:	0020      	movs	r0, r4
 8000f8c:	f7ff f8bc 	bl	8000108 <__udivsi3>
 8000f90:	0003      	movs	r3, r0
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 fb53 	bl	800163e <HAL_SYSTICK_Config>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e00f      	b.n	8000fc0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d80b      	bhi.n	8000fbe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	425b      	negs	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f000 fb30 	bl	8001614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_InitTick+0x64>)
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	001a      	movs	r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	18d2      	adds	r2, r2, r3
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	2000000c 	.word	0x2000000c
 8000ff4:	20000100 	.word	0x20000100

08000ff8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <HAL_GetTick+0x10>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	20000100 	.word	0x20000100

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff fff0 	bl	8000ff8 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	001a      	movs	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	189b      	adds	r3, r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	f7ff ffe0 	bl	8000ff8 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b004      	add	sp, #16
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	2000000c 	.word	0x2000000c

08001054 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e125      	b.n	80012be <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10a      	bne.n	8001090 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2234      	movs	r2, #52	; 0x34
 8001084:	2100      	movs	r1, #0
 8001086:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff fe2e 	bl	8000cec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001094:	2210      	movs	r2, #16
 8001096:	4013      	ands	r3, r2
 8001098:	d000      	beq.n	800109c <HAL_ADC_Init+0x48>
 800109a:	e103      	b.n	80012a4 <HAL_ADC_Init+0x250>
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d000      	beq.n	80010a8 <HAL_ADC_Init+0x54>
 80010a6:	e0fd      	b.n	80012a4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2204      	movs	r2, #4
 80010b0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80010b2:	d000      	beq.n	80010b6 <HAL_ADC_Init+0x62>
 80010b4:	e0f6      	b.n	80012a4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ba:	4a83      	ldr	r2, [pc, #524]	; (80012c8 <HAL_ADC_Init+0x274>)
 80010bc:	4013      	ands	r3, r2
 80010be:	2202      	movs	r2, #2
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d112      	bne.n	80010fa <HAL_ADC_Init+0xa6>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2201      	movs	r2, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d009      	beq.n	80010f6 <HAL_ADC_Init+0xa2>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Init+0xa6>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_ADC_Init+0xa8>
 80010fa:	2300      	movs	r3, #0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d116      	bne.n	800112e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2218      	movs	r2, #24
 8001108:	4393      	bics	r3, r2
 800110a:	0019      	movs	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	0899      	lsrs	r1, r3, #2
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4964      	ldr	r1, [pc, #400]	; (80012cc <HAL_ADC_Init+0x278>)
 800113a:	400a      	ands	r2, r1
 800113c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7e1b      	ldrb	r3, [r3, #24]
 8001142:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7e5b      	ldrb	r3, [r3, #25]
 8001148:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800114a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7e9b      	ldrb	r3, [r3, #26]
 8001150:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001152:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <HAL_ADC_Init+0x10e>
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	e000      	b.n	8001164 <HAL_ADC_Init+0x110>
 8001162:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001164:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800116a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d101      	bne.n	8001178 <HAL_ADC_Init+0x124>
 8001174:	2304      	movs	r3, #4
 8001176:	e000      	b.n	800117a <HAL_ADC_Init+0x126>
 8001178:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800117a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2124      	movs	r1, #36	; 0x24
 8001180:	5c5b      	ldrb	r3, [r3, r1]
 8001182:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001184:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4313      	orrs	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7edb      	ldrb	r3, [r3, #27]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d115      	bne.n	80011c0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e9b      	ldrb	r3, [r3, #26]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d105      	bne.n	80011a8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	0252      	lsls	r2, r2, #9
 80011a2:	4313      	orrs	r3, r2
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	e00b      	b.n	80011c0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ac:	2220      	movs	r2, #32
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	2201      	movs	r2, #1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69da      	ldr	r2, [r3, #28]
 80011c4:	23c2      	movs	r3, #194	; 0xc2
 80011c6:	33ff      	adds	r3, #255	; 0xff
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d007      	beq.n	80011dc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011d4:	4313      	orrs	r3, r2
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	4313      	orrs	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68d9      	ldr	r1, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	055b      	lsls	r3, r3, #21
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d01b      	beq.n	8001230 <HAL_ADC_Init+0x1dc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d017      	beq.n	8001230 <HAL_ADC_Init+0x1dc>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2b02      	cmp	r3, #2
 8001206:	d013      	beq.n	8001230 <HAL_ADC_Init+0x1dc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	2b03      	cmp	r3, #3
 800120e:	d00f      	beq.n	8001230 <HAL_ADC_Init+0x1dc>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2b04      	cmp	r3, #4
 8001216:	d00b      	beq.n	8001230 <HAL_ADC_Init+0x1dc>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	2b05      	cmp	r3, #5
 800121e:	d007      	beq.n	8001230 <HAL_ADC_Init+0x1dc>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	2b06      	cmp	r3, #6
 8001226:	d003      	beq.n	8001230 <HAL_ADC_Init+0x1dc>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b07      	cmp	r3, #7
 800122e:	d112      	bne.n	8001256 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2107      	movs	r1, #7
 800123c:	438a      	bics	r2, r1
 800123e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6959      	ldr	r1, [r3, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	2207      	movs	r2, #7
 800124c:	401a      	ands	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <HAL_ADC_Init+0x27c>)
 800125e:	4013      	ands	r3, r2
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	429a      	cmp	r2, r3
 8001264:	d10b      	bne.n	800127e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001270:	2203      	movs	r2, #3
 8001272:	4393      	bics	r3, r2
 8001274:	2201      	movs	r2, #1
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800127c:	e01c      	b.n	80012b8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	2212      	movs	r2, #18
 8001284:	4393      	bics	r3, r2
 8001286:	2210      	movs	r2, #16
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001292:	2201      	movs	r2, #1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800129a:	230f      	movs	r3, #15
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012a2:	e009      	b.n	80012b8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a8:	2210      	movs	r2, #16
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80012b0:	230f      	movs	r3, #15
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012b8:	230f      	movs	r3, #15
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	781b      	ldrb	r3, [r3, #0]
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b004      	add	sp, #16
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	fffffefd 	.word	0xfffffefd
 80012cc:	fffe0219 	.word	0xfffe0219
 80012d0:	833fffe7 	.word	0x833fffe7

080012d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012de:	230f      	movs	r3, #15
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	055b      	lsls	r3, r3, #21
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d011      	beq.n	800131a <HAL_ADC_ConfigChannel+0x46>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d00d      	beq.n	800131a <HAL_ADC_ConfigChannel+0x46>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	2b02      	cmp	r3, #2
 8001304:	d009      	beq.n	800131a <HAL_ADC_ConfigChannel+0x46>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130a:	2b03      	cmp	r3, #3
 800130c:	d005      	beq.n	800131a <HAL_ADC_ConfigChannel+0x46>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	2b04      	cmp	r3, #4
 8001314:	d001      	beq.n	800131a <HAL_ADC_ConfigChannel+0x46>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2234      	movs	r2, #52	; 0x34
 800131e:	5c9b      	ldrb	r3, [r3, r2]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x54>
 8001324:	2302      	movs	r3, #2
 8001326:	e0d0      	b.n	80014ca <HAL_ADC_ConfigChannel+0x1f6>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2234      	movs	r2, #52	; 0x34
 800132c:	2101      	movs	r1, #1
 800132e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2204      	movs	r2, #4
 8001338:	4013      	ands	r3, r2
 800133a:	d000      	beq.n	800133e <HAL_ADC_ConfigChannel+0x6a>
 800133c:	e0b4      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <HAL_ADC_ConfigChannel+0x200>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d100      	bne.n	800134a <HAL_ADC_ConfigChannel+0x76>
 8001348:	e082      	b.n	8001450 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	409a      	lsls	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	055b      	lsls	r3, r3, #21
 8001368:	429a      	cmp	r2, r3
 800136a:	d037      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	2b01      	cmp	r3, #1
 8001372:	d033      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	2b02      	cmp	r3, #2
 800137a:	d02f      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	2b03      	cmp	r3, #3
 8001382:	d02b      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	2b04      	cmp	r3, #4
 800138a:	d027      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	2b05      	cmp	r3, #5
 8001392:	d023      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	2b06      	cmp	r3, #6
 800139a:	d01f      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	d01b      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	2107      	movs	r1, #7
 80013b0:	400b      	ands	r3, r1
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d012      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2107      	movs	r1, #7
 80013c2:	438a      	bics	r2, r1
 80013c4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6959      	ldr	r1, [r3, #20]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2207      	movs	r2, #7
 80013d2:	401a      	ands	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b10      	cmp	r3, #16
 80013e2:	d007      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x120>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b11      	cmp	r3, #17
 80013ea:	d003      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x120>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b12      	cmp	r3, #18
 80013f2:	d163      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <HAL_ADC_ConfigChannel+0x204>)
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b10      	cmp	r3, #16
 80013fe:	d009      	beq.n	8001414 <HAL_ADC_ConfigChannel+0x140>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b11      	cmp	r3, #17
 8001406:	d102      	bne.n	800140e <HAL_ADC_ConfigChannel+0x13a>
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	03db      	lsls	r3, r3, #15
 800140c:	e004      	b.n	8001418 <HAL_ADC_ConfigChannel+0x144>
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	045b      	lsls	r3, r3, #17
 8001412:	e001      	b.n	8001418 <HAL_ADC_ConfigChannel+0x144>
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <HAL_ADC_ConfigChannel+0x204>)
 800141a:	430b      	orrs	r3, r1
 800141c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d14a      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_ADC_ConfigChannel+0x208>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	492d      	ldr	r1, [pc, #180]	; (80014e0 <HAL_ADC_ConfigChannel+0x20c>)
 800142c:	0018      	movs	r0, r3
 800142e:	f7fe fe6b 	bl	8000108 <__udivsi3>
 8001432:	0003      	movs	r3, r0
 8001434:	001a      	movs	r2, r3
 8001436:	0013      	movs	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	189b      	adds	r3, r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001440:	e002      	b.n	8001448 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x16e>
 800144e:	e035      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	4099      	lsls	r1, r3
 800145e:	000b      	movs	r3, r1
 8001460:	43d9      	mvns	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	400a      	ands	r2, r1
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b10      	cmp	r3, #16
 8001470:	d007      	beq.n	8001482 <HAL_ADC_ConfigChannel+0x1ae>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b11      	cmp	r3, #17
 8001478:	d003      	beq.n	8001482 <HAL_ADC_ConfigChannel+0x1ae>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b12      	cmp	r3, #18
 8001480:	d11c      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_ADC_ConfigChannel+0x204>)
 8001484:	6819      	ldr	r1, [r3, #0]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b10      	cmp	r3, #16
 800148c:	d007      	beq.n	800149e <HAL_ADC_ConfigChannel+0x1ca>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b11      	cmp	r3, #17
 8001494:	d101      	bne.n	800149a <HAL_ADC_ConfigChannel+0x1c6>
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_ADC_ConfigChannel+0x210>)
 8001498:	e002      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x1cc>
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_ADC_ConfigChannel+0x214>)
 800149c:	e000      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x1cc>
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_ADC_ConfigChannel+0x218>)
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <HAL_ADC_ConfigChannel+0x204>)
 80014a2:	400b      	ands	r3, r1
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e009      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ac:	2220      	movs	r2, #32
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2234      	movs	r2, #52	; 0x34
 80014c0:	2100      	movs	r1, #0
 80014c2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	00001001 	.word	0x00001001
 80014d8:	40012708 	.word	0x40012708
 80014dc:	20000004 	.word	0x20000004
 80014e0:	000f4240 	.word	0x000f4240
 80014e4:	ffbfffff 	.word	0xffbfffff
 80014e8:	feffffff 	.word	0xfeffffff
 80014ec:	ff7fffff 	.word	0xff7fffff

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	0002      	movs	r2, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b7f      	cmp	r3, #127	; 0x7f
 8001504:	d828      	bhi.n	8001558 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001506:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <__NVIC_SetPriority+0xd4>)
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b25b      	sxtb	r3, r3
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	33c0      	adds	r3, #192	; 0xc0
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	589b      	ldr	r3, [r3, r2]
 8001516:	1dfa      	adds	r2, r7, #7
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	0011      	movs	r1, r2
 800151c:	2203      	movs	r2, #3
 800151e:	400a      	ands	r2, r1
 8001520:	00d2      	lsls	r2, r2, #3
 8001522:	21ff      	movs	r1, #255	; 0xff
 8001524:	4091      	lsls	r1, r2
 8001526:	000a      	movs	r2, r1
 8001528:	43d2      	mvns	r2, r2
 800152a:	401a      	ands	r2, r3
 800152c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	22ff      	movs	r2, #255	; 0xff
 8001534:	401a      	ands	r2, r3
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	0018      	movs	r0, r3
 800153c:	2303      	movs	r3, #3
 800153e:	4003      	ands	r3, r0
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001544:	481f      	ldr	r0, [pc, #124]	; (80015c4 <__NVIC_SetPriority+0xd4>)
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b25b      	sxtb	r3, r3
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	430a      	orrs	r2, r1
 8001550:	33c0      	adds	r3, #192	; 0xc0
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001556:	e031      	b.n	80015bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <__NVIC_SetPriority+0xd8>)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	0019      	movs	r1, r3
 8001560:	230f      	movs	r3, #15
 8001562:	400b      	ands	r3, r1
 8001564:	3b08      	subs	r3, #8
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3306      	adds	r3, #6
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	18d3      	adds	r3, r2, r3
 800156e:	3304      	adds	r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1dfa      	adds	r2, r7, #7
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	0011      	movs	r1, r2
 8001578:	2203      	movs	r2, #3
 800157a:	400a      	ands	r2, r1
 800157c:	00d2      	lsls	r2, r2, #3
 800157e:	21ff      	movs	r1, #255	; 0xff
 8001580:	4091      	lsls	r1, r2
 8001582:	000a      	movs	r2, r1
 8001584:	43d2      	mvns	r2, r2
 8001586:	401a      	ands	r2, r3
 8001588:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	22ff      	movs	r2, #255	; 0xff
 8001590:	401a      	ands	r2, r3
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	0018      	movs	r0, r3
 8001598:	2303      	movs	r3, #3
 800159a:	4003      	ands	r3, r0
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <__NVIC_SetPriority+0xd8>)
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	001c      	movs	r4, r3
 80015a8:	230f      	movs	r3, #15
 80015aa:	4023      	ands	r3, r4
 80015ac:	3b08      	subs	r3, #8
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	430a      	orrs	r2, r1
 80015b2:	3306      	adds	r3, #6
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	18c3      	adds	r3, r0, r3
 80015b8:	3304      	adds	r3, #4
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b003      	add	sp, #12
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1e5a      	subs	r2, r3, #1
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	045b      	lsls	r3, r3, #17
 80015dc:	429a      	cmp	r2, r3
 80015de:	d301      	bcc.n	80015e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e0:	2301      	movs	r3, #1
 80015e2:	e010      	b.n	8001606 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <SysTick_Config+0x44>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	3a01      	subs	r2, #1
 80015ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ec:	2301      	movs	r3, #1
 80015ee:	425b      	negs	r3, r3
 80015f0:	2103      	movs	r1, #3
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff ff7c 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x44>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x44>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	210f      	movs	r1, #15
 8001620:	187b      	adds	r3, r7, r1
 8001622:	1c02      	adds	r2, r0, #0
 8001624:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	187b      	adds	r3, r7, r1
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	0011      	movs	r1, r2
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff ff5d 	bl	80014f0 <__NVIC_SetPriority>
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff ffbf 	bl	80015cc <SysTick_Config>
 800164e:	0003      	movs	r3, r0
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e149      	b.n	80018fc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4091      	lsls	r1, r2
 8001672:	000a      	movs	r2, r1
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d100      	bne.n	8001680 <HAL_GPIO_Init+0x28>
 800167e:	e13a      	b.n	80018f6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	4013      	ands	r3, r2
 8001688:	2b01      	cmp	r3, #1
 800168a:	d005      	beq.n	8001698 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001694:	2b02      	cmp	r3, #2
 8001696:	d130      	bne.n	80016fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	409a      	lsls	r2, r3
 80016a6:	0013      	movs	r3, r2
 80016a8:	43da      	mvns	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	409a      	lsls	r2, r3
 80016ba:	0013      	movs	r3, r2
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ce:	2201      	movs	r2, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	43da      	mvns	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	2201      	movs	r2, #1
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
 80016ec:	0013      	movs	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	4013      	ands	r3, r2
 8001702:	2b03      	cmp	r3, #3
 8001704:	d017      	beq.n	8001736 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	409a      	lsls	r2, r3
 8001714:	0013      	movs	r3, r2
 8001716:	43da      	mvns	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	4013      	ands	r3, r2
 800173e:	2b02      	cmp	r3, #2
 8001740:	d123      	bne.n	800178a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3208      	adds	r2, #8
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	58d3      	ldr	r3, [r2, r3]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2207      	movs	r2, #7
 8001754:	4013      	ands	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	220f      	movs	r2, #15
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	43da      	mvns	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	691a      	ldr	r2, [r3, #16]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2107      	movs	r1, #7
 800176e:	400b      	ands	r3, r1
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	0092      	lsls	r2, r2, #2
 8001786:	6939      	ldr	r1, [r7, #16]
 8001788:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2203      	movs	r2, #3
 80017a8:	401a      	ands	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	23c0      	movs	r3, #192	; 0xc0
 80017c4:	029b      	lsls	r3, r3, #10
 80017c6:	4013      	ands	r3, r2
 80017c8:	d100      	bne.n	80017cc <HAL_GPIO_Init+0x174>
 80017ca:	e094      	b.n	80018f6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017cc:	4b51      	ldr	r3, [pc, #324]	; (8001914 <HAL_GPIO_Init+0x2bc>)
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_GPIO_Init+0x2bc>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	4b4e      	ldr	r3, [pc, #312]	; (8001914 <HAL_GPIO_Init+0x2bc>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_GPIO_Init+0x2c0>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	589b      	ldr	r3, [r3, r2]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2203      	movs	r2, #3
 80017f6:	4013      	ands	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	409a      	lsls	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	43da      	mvns	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	2390      	movs	r3, #144	; 0x90
 800180c:	05db      	lsls	r3, r3, #23
 800180e:	429a      	cmp	r2, r3
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x1d6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a41      	ldr	r2, [pc, #260]	; (800191c <HAL_GPIO_Init+0x2c4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x1d2>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a40      	ldr	r2, [pc, #256]	; (8001920 <HAL_GPIO_Init+0x2c8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x1ce>
 8001822:	2302      	movs	r3, #2
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x1d8>
 8001826:	2305      	movs	r3, #5
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x1d8>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x1d8>
 800182e:	2300      	movs	r3, #0
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	2103      	movs	r1, #3
 8001834:	400a      	ands	r2, r1
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x2c0>)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43da      	mvns	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	4013      	ands	r3, r2
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43da      	mvns	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4013      	ands	r3, r2
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43da      	mvns	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	035b      	lsls	r3, r3, #13
 80018ba:	4013      	ands	r3, r2
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43da      	mvns	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	039b      	lsls	r3, r3, #14
 80018e4:	4013      	ands	r3, r2
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_GPIO_Init+0x2cc>)
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	40da      	lsrs	r2, r3
 8001904:	1e13      	subs	r3, r2, #0
 8001906:	d000      	beq.n	800190a <HAL_GPIO_Init+0x2b2>
 8001908:	e6ae      	b.n	8001668 <HAL_GPIO_Init+0x10>
  } 
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b006      	add	sp, #24
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	40010000 	.word	0x40010000
 800191c:	48000400 	.word	0x48000400
 8001920:	48000800 	.word	0x48000800
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	000a      	movs	r2, r1
 8001932:	1cbb      	adds	r3, r7, #2
 8001934:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	1cba      	adds	r2, r7, #2
 800193c:	8812      	ldrh	r2, [r2, #0]
 800193e:	4013      	ands	r3, r2
 8001940:	d004      	beq.n	800194c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001942:	230f      	movs	r3, #15
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e003      	b.n	8001954 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800194c:	230f      	movs	r3, #15
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001954:	230f      	movs	r3, #15
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	781b      	ldrb	r3, [r3, #0]
  }
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b004      	add	sp, #16
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	0008      	movs	r0, r1
 800196c:	0011      	movs	r1, r2
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	1c02      	adds	r2, r0, #0
 8001972:	801a      	strh	r2, [r3, #0]
 8001974:	1c7b      	adds	r3, r7, #1
 8001976:	1c0a      	adds	r2, r1, #0
 8001978:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197a:	1c7b      	adds	r3, r7, #1
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001982:	1cbb      	adds	r3, r7, #2
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800198a:	e003      	b.n	8001994 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198c:	1cbb      	adds	r3, r7, #2
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e301      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x1e>
 80019b8:	e08d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ba:	4bc3      	ldr	r3, [pc, #780]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	220c      	movs	r2, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d00e      	beq.n	80019e4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c6:	4bc0      	ldr	r3, [pc, #768]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	220c      	movs	r2, #12
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x64>
 80019d2:	4bbd      	ldr	r3, [pc, #756]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	401a      	ands	r2, r3
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d10d      	bne.n	8001a00 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	4bb8      	ldr	r3, [pc, #736]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x56>
 80019f0:	e070      	b.n	8001ad4 <HAL_RCC_OscConfig+0x138>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d000      	beq.n	80019fc <HAL_RCC_OscConfig+0x60>
 80019fa:	e06b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e2d8      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x7c>
 8001a08:	4baf      	ldr	r3, [pc, #700]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4bae      	ldr	r3, [pc, #696]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	0249      	lsls	r1, r1, #9
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e02f      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x9e>
 8001a20:	4ba9      	ldr	r3, [pc, #676]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4ba8      	ldr	r3, [pc, #672]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	49a9      	ldr	r1, [pc, #676]	; (8001ccc <HAL_RCC_OscConfig+0x330>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4ba6      	ldr	r3, [pc, #664]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4ba5      	ldr	r3, [pc, #660]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	49a7      	ldr	r1, [pc, #668]	; (8001cd0 <HAL_RCC_OscConfig+0x334>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e01e      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d10e      	bne.n	8001a60 <HAL_RCC_OscConfig+0xc4>
 8001a42:	4ba1      	ldr	r3, [pc, #644]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4ba0      	ldr	r3, [pc, #640]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	02c9      	lsls	r1, r1, #11
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4b9d      	ldr	r3, [pc, #628]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b9c      	ldr	r3, [pc, #624]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	0249      	lsls	r1, r1, #9
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a60:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b98      	ldr	r3, [pc, #608]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	4999      	ldr	r1, [pc, #612]	; (8001ccc <HAL_RCC_OscConfig+0x330>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b95      	ldr	r3, [pc, #596]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	4997      	ldr	r1, [pc, #604]	; (8001cd0 <HAL_RCC_OscConfig+0x334>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d014      	beq.n	8001aaa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff faba 	bl	8000ff8 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fab5 	bl	8000ff8 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b64      	cmp	r3, #100	; 0x64
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e28a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9c:	4b8a      	ldr	r3, [pc, #552]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0xee>
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff faa5 	bl	8000ff8 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff faa0 	bl	8000ff8 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e275      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x118>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x146>
 8001ae0:	e069      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d00b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aec:	4b76      	ldr	r3, [pc, #472]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	220c      	movs	r2, #12
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d11c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x196>
 8001af8:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	025b      	lsls	r3, r3, #9
 8001b00:	4013      	ands	r3, r2
 8001b02:	d116      	bne.n	8001b32 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b04:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x17e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e24b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b6b      	ldr	r3, [pc, #428]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	22f8      	movs	r2, #248	; 0xf8
 8001b20:	4393      	bics	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00da      	lsls	r2, r3, #3
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b30:	e041      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d024      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b62      	ldr	r3, [pc, #392]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fa57 	bl	8000ff8 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff fa52 	bl	8000ff8 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e227      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d0f1      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	22f8      	movs	r2, #248	; 0xf8
 8001b72:	4393      	bics	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00da      	lsls	r2, r3, #3
 8001b7c:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e018      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b84:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fa32 	bl	8000ff8 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fa2d 	bl	8000ff8 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e202      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1f1      	bne.n	8001b9a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d019      	beq.n	8001bfc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bcc:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fa10 	bl	8000ff8 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff fa0b 	bl	8000ff8 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e1e0      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0f1      	beq.n	8001bde <HAL_RCC_OscConfig+0x242>
 8001bfa:	e018      	b.n	8001c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	438a      	bics	r2, r1
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7ff f9f6 	bl	8000ff8 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c12:	f7ff f9f1 	bl	8000ff8 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e1c6      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f1      	bne.n	8001c12 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2204      	movs	r2, #4
 8001c34:	4013      	ands	r3, r2
 8001c36:	d100      	bne.n	8001c3a <HAL_RCC_OscConfig+0x29e>
 8001c38:	e0b4      	b.n	8001da4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	201f      	movs	r0, #31
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	055b      	lsls	r3, r3, #21
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d110      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	0549      	lsls	r1, r1, #21
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	61da      	str	r2, [r3, #28]
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	055b      	lsls	r3, r3, #21
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d11a      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0049      	lsls	r1, r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f9b5 	bl	8000ff8 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c94:	f7ff f9b0 	bl	8000ff8 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e185      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x33c>
 8001cba:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	621a      	str	r2, [r3, #32]
 8001cc6:	e035      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	fffeffff 	.word	0xfffeffff
 8001cd0:	fffbffff 	.word	0xfffbffff
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x35e>
 8001ce0:	4bb6      	ldr	r3, [pc, #728]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	4bb5      	ldr	r3, [pc, #724]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	438a      	bics	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]
 8001cec:	4bb3      	ldr	r3, [pc, #716]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	4bb2      	ldr	r3, [pc, #712]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	621a      	str	r2, [r3, #32]
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x380>
 8001d02:	4bae      	ldr	r3, [pc, #696]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	4bad      	ldr	r3, [pc, #692]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d08:	2104      	movs	r1, #4
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	621a      	str	r2, [r3, #32]
 8001d0e:	4bab      	ldr	r3, [pc, #684]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d10:	6a1a      	ldr	r2, [r3, #32]
 8001d12:	4baa      	ldr	r3, [pc, #680]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	621a      	str	r2, [r3, #32]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001d1c:	4ba7      	ldr	r3, [pc, #668]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	4ba6      	ldr	r3, [pc, #664]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	438a      	bics	r2, r1
 8001d26:	621a      	str	r2, [r3, #32]
 8001d28:	4ba4      	ldr	r3, [pc, #656]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d2e:	2104      	movs	r1, #4
 8001d30:	438a      	bics	r2, r1
 8001d32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d014      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f95c 	bl	8000ff8 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff f957 	bl	8000ff8 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4a9b      	ldr	r2, [pc, #620]	; (8001fc0 <HAL_RCC_OscConfig+0x624>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e12b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	4b98      	ldr	r3, [pc, #608]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3aa>
 8001d64:	e013      	b.n	8001d8e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff f947 	bl	8000ff8 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6e:	e009      	b.n	8001d84 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff f942 	bl	8000ff8 <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	4a91      	ldr	r2, [pc, #580]	; (8001fc0 <HAL_RCC_OscConfig+0x624>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e116      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d84:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d8e:	231f      	movs	r3, #31
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	4b87      	ldr	r3, [pc, #540]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d9e:	4989      	ldr	r1, [pc, #548]	; (8001fc4 <HAL_RCC_OscConfig+0x628>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	4013      	ands	r3, r2
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12a      	bne.n	8001e0c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001db6:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dba:	4b80      	ldr	r3, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7ff f913 	bl	8000ff8 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dd8:	f7ff f90e 	bl	8000ff8 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0e3      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dea:	4b74      	ldr	r3, [pc, #464]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	2202      	movs	r2, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f1      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001df4:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	22f8      	movs	r2, #248	; 0xf8
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	00da      	lsls	r2, r3, #3
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34
 8001e0a:	e034      	b.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	3305      	adds	r3, #5
 8001e12:	d111      	bne.n	8001e38 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e14:	4b69      	ldr	r3, [pc, #420]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	22f8      	movs	r2, #248	; 0xf8
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	00da      	lsls	r2, r3, #3
 8001e30:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e38:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3c:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e3e:	2104      	movs	r1, #4
 8001e40:	430a      	orrs	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e44:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e48:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7ff f8d2 	bl	8000ff8 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e5a:	f7ff f8cd 	bl	8000ff8 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0a2      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e70:	2202      	movs	r2, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d1f1      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d100      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4e4>
 8001e7e:	e097      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e80:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	220c      	movs	r2, #12
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d100      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4f2>
 8001e8c:	e06b      	b.n	8001f66 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d14c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e9c:	494a      	ldr	r1, [pc, #296]	; (8001fc8 <HAL_RCC_OscConfig+0x62c>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7ff f8a9 	bl	8000ff8 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff f8a4 	bl	8000ff8 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e079      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	049b      	lsls	r3, r3, #18
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eca:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	220f      	movs	r2, #15
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <HAL_RCC_OscConfig+0x630>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0449      	lsls	r1, r1, #17
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff f877 	bl	8000ff8 <HAL_GetTick>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f872 	bl	8000ff8 <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e047      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	049b      	lsls	r3, r3, #18
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x574>
 8001f2e:	e03f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f36:	4924      	ldr	r1, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x62c>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f85c 	bl	8000ff8 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff f857 	bl	8000ff8 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e02c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	049b      	lsls	r3, r3, #18
 8001f60:	4013      	ands	r3, r2
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5aa>
 8001f64:	e024      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e01f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	025b      	lsls	r3, r3, #9
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d10e      	bne.n	8001fac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	220f      	movs	r2, #15
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	23f0      	movs	r3, #240	; 0xf0
 8001fa0:	039b      	lsls	r3, r3, #14
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b008      	add	sp, #32
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	00001388 	.word	0x00001388
 8001fc4:	efffffff 	.word	0xefffffff
 8001fc8:	feffffff 	.word	0xfeffffff
 8001fcc:	ffc2ffff 	.word	0xffc2ffff

08001fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b3      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d911      	bls.n	8002016 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e09a      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d015      	beq.n	800204c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2204      	movs	r2, #4
 8002026:	4013      	ands	r3, r2
 8002028:	d006      	beq.n	8002038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800202a:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002030:	21e0      	movs	r1, #224	; 0xe0
 8002032:	00c9      	lsls	r1, r1, #3
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	22f0      	movs	r2, #240	; 0xf0
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002048:	430a      	orrs	r2, r1
 800204a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	d040      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d114      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06e      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d108      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e062      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2202      	movs	r2, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e05b      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	4393      	bics	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7fe ffa6 	bl	8000ff8 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b2:	f7fe ffa1 	bl	8000ff8 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <HAL_RCC_ClockConfig+0x18c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e042      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	220c      	movs	r2, #12
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1ec      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d211      	bcs.n	800210a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4393      	bics	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e020      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2204      	movs	r2, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d009      	beq.n	8002128 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_RCC_ClockConfig+0x190>)
 800211a:	4013      	ands	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002128:	f000 f820 	bl	800216c <HAL_RCC_GetSysClockFreq>
 800212c:	0001      	movs	r1, r0
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	220f      	movs	r2, #15
 8002136:	4013      	ands	r3, r2
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x194>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	000a      	movs	r2, r1
 800213e:	40da      	lsrs	r2, r3
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x198>)
 8002142:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002144:	2003      	movs	r0, #3
 8002146:	f7fe ff11 	bl	8000f6c <HAL_InitTick>
  
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	00001388 	.word	0x00001388
 8002160:	fffff8ff 	.word	0xfffff8ff
 8002164:	08002fac 	.word	0x08002fac
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b08f      	sub	sp, #60	; 0x3c
 8002170:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002172:	2314      	movs	r3, #20
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002178:	ca13      	ldmia	r2!, {r0, r1, r4}
 800217a:	c313      	stmia	r3!, {r0, r1, r4}
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002184:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002186:	c313      	stmia	r3!, {r0, r1, r4}
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
 8002194:	2300      	movs	r3, #0
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	220c      	movs	r2, #12
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d002      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x4a>
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d003      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x50>
 80021b4:	e02d      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021ba:	e02d      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	0c9b      	lsrs	r3, r3, #18
 80021c0:	220f      	movs	r2, #15
 80021c2:	4013      	ands	r3, r2
 80021c4:	2214      	movs	r2, #20
 80021c6:	18ba      	adds	r2, r7, r2
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	220f      	movs	r2, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	1d3a      	adds	r2, r7, #4
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	025b      	lsls	r3, r3, #9
 80021e0:	4013      	ands	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021e6:	4812      	ldr	r0, [pc, #72]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e8:	f7fd ff8e 	bl	8000108 <__udivsi3>
 80021ec:	0003      	movs	r3, r0
 80021ee:	001a      	movs	r2, r3
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	4353      	muls	r3, r2
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
 80021f6:	e009      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fa:	000a      	movs	r2, r1
 80021fc:	0152      	lsls	r2, r2, #5
 80021fe:	1a52      	subs	r2, r2, r1
 8002200:	0193      	lsls	r3, r2, #6
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	185b      	adds	r3, r3, r1
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002216:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b00f      	add	sp, #60	; 0x3c
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	08002f58 	.word	0x08002f58
 8002228:	08002f68 	.word	0x08002f68
 800222c:	40021000 	.word	0x40021000
 8002230:	007a1200 	.word	0x007a1200

08002234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e042      	b.n	80022cc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	223d      	movs	r2, #61	; 0x3d
 800224a:	5c9b      	ldrb	r3, [r3, r2]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d107      	bne.n	8002262 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	223c      	movs	r2, #60	; 0x3c
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f7fe fd8b 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	223d      	movs	r2, #61	; 0x3d
 8002266:	2102      	movs	r1, #2
 8002268:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3304      	adds	r3, #4
 8002272:	0019      	movs	r1, r3
 8002274:	0010      	movs	r0, r2
 8002276:	f000 facb 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2246      	movs	r2, #70	; 0x46
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	223e      	movs	r2, #62	; 0x3e
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223f      	movs	r2, #63	; 0x3f
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2240      	movs	r2, #64	; 0x40
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2241      	movs	r2, #65	; 0x41
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2242      	movs	r2, #66	; 0x42
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2243      	movs	r2, #67	; 0x43
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2244      	movs	r2, #68	; 0x44
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2245      	movs	r2, #69	; 0x45
 80022be:	2101      	movs	r1, #1
 80022c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	223d      	movs	r2, #61	; 0x3d
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e042      	b.n	800236c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	223d      	movs	r2, #61	; 0x3d
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	223c      	movs	r2, #60	; 0x3c
 80022f6:	2100      	movs	r1, #0
 80022f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 f839 	bl	8002374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	223d      	movs	r2, #61	; 0x3d
 8002306:	2102      	movs	r1, #2
 8002308:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	0019      	movs	r1, r3
 8002314:	0010      	movs	r0, r2
 8002316:	f000 fa7b 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2246      	movs	r2, #70	; 0x46
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	223e      	movs	r2, #62	; 0x3e
 8002326:	2101      	movs	r1, #1
 8002328:	5499      	strb	r1, [r3, r2]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	223f      	movs	r2, #63	; 0x3f
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2241      	movs	r2, #65	; 0x41
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2242      	movs	r2, #66	; 0x42
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2243      	movs	r2, #67	; 0x43
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2244      	movs	r2, #68	; 0x44
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2245      	movs	r2, #69	; 0x45
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	223d      	movs	r2, #61	; 0x3d
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d108      	bne.n	80023a6 <HAL_TIM_PWM_Start+0x22>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	223e      	movs	r2, #62	; 0x3e
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	1e5a      	subs	r2, r3, #1
 80023a0:	4193      	sbcs	r3, r2
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e01f      	b.n	80023e6 <HAL_TIM_PWM_Start+0x62>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d108      	bne.n	80023be <HAL_TIM_PWM_Start+0x3a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	223f      	movs	r2, #63	; 0x3f
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	1e5a      	subs	r2, r3, #1
 80023b8:	4193      	sbcs	r3, r2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	e013      	b.n	80023e6 <HAL_TIM_PWM_Start+0x62>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d108      	bne.n	80023d6 <HAL_TIM_PWM_Start+0x52>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	5c9b      	ldrb	r3, [r3, r2]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	4193      	sbcs	r3, r2
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	e007      	b.n	80023e6 <HAL_TIM_PWM_Start+0x62>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2241      	movs	r2, #65	; 0x41
 80023da:	5c9b      	ldrb	r3, [r3, r2]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	1e5a      	subs	r2, r3, #1
 80023e2:	4193      	sbcs	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06a      	b.n	80024c4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_PWM_Start+0x7a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	223e      	movs	r2, #62	; 0x3e
 80023f8:	2102      	movs	r1, #2
 80023fa:	5499      	strb	r1, [r3, r2]
 80023fc:	e013      	b.n	8002426 <HAL_TIM_PWM_Start+0xa2>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d104      	bne.n	800240e <HAL_TIM_PWM_Start+0x8a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	223f      	movs	r2, #63	; 0x3f
 8002408:	2102      	movs	r1, #2
 800240a:	5499      	strb	r1, [r3, r2]
 800240c:	e00b      	b.n	8002426 <HAL_TIM_PWM_Start+0xa2>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d104      	bne.n	800241e <HAL_TIM_PWM_Start+0x9a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	2102      	movs	r1, #2
 800241a:	5499      	strb	r1, [r3, r2]
 800241c:	e003      	b.n	8002426 <HAL_TIM_PWM_Start+0xa2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2241      	movs	r2, #65	; 0x41
 8002422:	2102      	movs	r1, #2
 8002424:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6839      	ldr	r1, [r7, #0]
 800242c:	2201      	movs	r2, #1
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fcde 	bl	8002df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a24      	ldr	r2, [pc, #144]	; (80024cc <HAL_TIM_PWM_Start+0x148>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_TIM_PWM_Start+0xce>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <HAL_TIM_PWM_Start+0x14c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d004      	beq.n	8002452 <HAL_TIM_PWM_Start+0xce>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_TIM_PWM_Start+0x150>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_TIM_PWM_Start+0xd2>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_TIM_PWM_Start+0xd4>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	0209      	lsls	r1, r1, #8
 800246a:	430a      	orrs	r2, r1
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a16      	ldr	r2, [pc, #88]	; (80024cc <HAL_TIM_PWM_Start+0x148>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00a      	beq.n	800248e <HAL_TIM_PWM_Start+0x10a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	05db      	lsls	r3, r3, #23
 8002480:	429a      	cmp	r2, r3
 8002482:	d004      	beq.n	800248e <HAL_TIM_PWM_Start+0x10a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <HAL_TIM_PWM_Start+0x154>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d111      	bne.n	80024b2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2207      	movs	r2, #7
 8002496:	4013      	ands	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b06      	cmp	r3, #6
 800249e:	d010      	beq.n	80024c2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2101      	movs	r1, #1
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b0:	e007      	b.n	80024c2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40014400 	.word	0x40014400
 80024d4:	40014800 	.word	0x40014800
 80024d8:	40000400 	.word	0x40000400

080024dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2317      	movs	r3, #23
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	223c      	movs	r2, #60	; 0x3c
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0ad      	b.n	800265a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	223c      	movs	r2, #60	; 0x3c
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d100      	bne.n	800250e <HAL_TIM_PWM_ConfigChannel+0x32>
 800250c:	e076      	b.n	80025fc <HAL_TIM_PWM_ConfigChannel+0x120>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d900      	bls.n	8002516 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002514:	e095      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d04e      	beq.n	80025ba <HAL_TIM_PWM_ConfigChannel+0xde>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b08      	cmp	r3, #8
 8002520:	d900      	bls.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002522:	e08e      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_PWM_ConfigChannel+0x56>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b04      	cmp	r3, #4
 800252e:	d021      	beq.n	8002574 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002530:	e087      	b.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	0011      	movs	r1, r2
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f9de 	bl	80028fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2108      	movs	r1, #8
 800254c:	430a      	orrs	r2, r1
 800254e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2104      	movs	r1, #4
 800255c:	438a      	bics	r2, r1
 800255e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6999      	ldr	r1, [r3, #24]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	619a      	str	r2, [r3, #24]
      break;
 8002572:	e06b      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	0011      	movs	r1, r2
 800257c:	0018      	movs	r0, r3
 800257e:	f000 fa3b 	bl	80029f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	0109      	lsls	r1, r1, #4
 8002590:	430a      	orrs	r2, r1
 8002592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4931      	ldr	r1, [pc, #196]	; (8002664 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6999      	ldr	r1, [r3, #24]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	619a      	str	r2, [r3, #24]
      break;
 80025b8:	e048      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	0011      	movs	r1, r2
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 fa96 	bl	8002af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2108      	movs	r1, #8
 80025d4:	430a      	orrs	r2, r1
 80025d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2104      	movs	r1, #4
 80025e4:	438a      	bics	r2, r1
 80025e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69d9      	ldr	r1, [r3, #28]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	61da      	str	r2, [r3, #28]
      break;
 80025fa:	e027      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f000 faf5 	bl	8002bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0109      	lsls	r1, r1, #4
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	490f      	ldr	r1, [pc, #60]	; (8002664 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002628:	400a      	ands	r2, r1
 800262a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69d9      	ldr	r1, [r3, #28]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	61da      	str	r2, [r3, #28]
      break;
 8002640:	e004      	b.n	800264c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002642:	2317      	movs	r3, #23
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
      break;
 800264a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	223c      	movs	r2, #60	; 0x3c
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]

  return status;
 8002654:	2317      	movs	r3, #23
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b006      	add	sp, #24
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	fffffbff 	.word	0xfffffbff

08002668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	230f      	movs	r3, #15
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	223c      	movs	r2, #60	; 0x3c
 800267e:	5c9b      	ldrb	r3, [r3, r2]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_TIM_ConfigClockSource+0x20>
 8002684:	2302      	movs	r3, #2
 8002686:	e0bc      	b.n	8002802 <HAL_TIM_ConfigClockSource+0x19a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	223c      	movs	r2, #60	; 0x3c
 800268c:	2101      	movs	r1, #1
 800268e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	223d      	movs	r2, #61	; 0x3d
 8002694:	2102      	movs	r1, #2
 8002696:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2277      	movs	r2, #119	; 0x77
 80026a4:	4393      	bics	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_TIM_ConfigClockSource+0x1a4>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	0192      	lsls	r2, r2, #6
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d040      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0xde>
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	0192      	lsls	r2, r2, #6
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d900      	bls.n	80026ce <HAL_TIM_ConfigClockSource+0x66>
 80026cc:	e088      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	0152      	lsls	r2, r2, #5
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d100      	bne.n	80026d8 <HAL_TIM_ConfigClockSource+0x70>
 80026d6:	e088      	b.n	80027ea <HAL_TIM_ConfigClockSource+0x182>
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	0152      	lsls	r2, r2, #5
 80026dc:	4293      	cmp	r3, r2
 80026de:	d900      	bls.n	80026e2 <HAL_TIM_ConfigClockSource+0x7a>
 80026e0:	e07e      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
 80026e2:	2b70      	cmp	r3, #112	; 0x70
 80026e4:	d018      	beq.n	8002718 <HAL_TIM_ConfigClockSource+0xb0>
 80026e6:	d900      	bls.n	80026ea <HAL_TIM_ConfigClockSource+0x82>
 80026e8:	e07a      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
 80026ea:	2b60      	cmp	r3, #96	; 0x60
 80026ec:	d04f      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x126>
 80026ee:	d900      	bls.n	80026f2 <HAL_TIM_ConfigClockSource+0x8a>
 80026f0:	e076      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
 80026f2:	2b50      	cmp	r3, #80	; 0x50
 80026f4:	d03b      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x106>
 80026f6:	d900      	bls.n	80026fa <HAL_TIM_ConfigClockSource+0x92>
 80026f8:	e072      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d057      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x146>
 80026fe:	d900      	bls.n	8002702 <HAL_TIM_ConfigClockSource+0x9a>
 8002700:	e06e      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
 8002702:	2b30      	cmp	r3, #48	; 0x30
 8002704:	d063      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x166>
 8002706:	d86b      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
 8002708:	2b20      	cmp	r3, #32
 800270a:	d060      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x166>
 800270c:	d868      	bhi.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d05d      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x166>
 8002712:	2b10      	cmp	r3, #16
 8002714:	d05b      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x166>
 8002716:	e063      	b.n	80027e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f000 fb42 	bl	8002db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2277      	movs	r2, #119	; 0x77
 8002738:	4313      	orrs	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	609a      	str	r2, [r3, #8]
      break;
 8002744:	e052      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6899      	ldr	r1, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f000 fb2b 	bl	8002db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	01c9      	lsls	r1, r1, #7
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
      break;
 800276c:	e03e      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	001a      	movs	r2, r3
 800277c:	f000 fa9e 	bl	8002cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2150      	movs	r1, #80	; 0x50
 8002786:	0018      	movs	r0, r3
 8002788:	f000 faf8 	bl	8002d7c <TIM_ITRx_SetConfig>
      break;
 800278c:	e02e      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	001a      	movs	r2, r3
 800279c:	f000 fabc 	bl	8002d18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2160      	movs	r1, #96	; 0x60
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 fae8 	bl	8002d7c <TIM_ITRx_SetConfig>
      break;
 80027ac:	e01e      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	001a      	movs	r2, r3
 80027bc:	f000 fa7e 	bl	8002cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2140      	movs	r1, #64	; 0x40
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 fad8 	bl	8002d7c <TIM_ITRx_SetConfig>
      break;
 80027cc:	e00e      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	0019      	movs	r1, r3
 80027d8:	0010      	movs	r0, r2
 80027da:	f000 facf 	bl	8002d7c <TIM_ITRx_SetConfig>
      break;
 80027de:	e005      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80027e0:	230f      	movs	r3, #15
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
      break;
 80027e8:	e000      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	223d      	movs	r2, #61	; 0x3d
 80027f0:	2101      	movs	r1, #1
 80027f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	223c      	movs	r2, #60	; 0x3c
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]

  return status;
 80027fc:	230f      	movs	r3, #15
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b004      	add	sp, #16
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	ffff00ff 	.word	0xffff00ff

08002810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a30      	ldr	r2, [pc, #192]	; (80028e4 <TIM_Base_SetConfig+0xd4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d008      	beq.n	800283a <TIM_Base_SetConfig+0x2a>
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	05db      	lsls	r3, r3, #23
 800282e:	429a      	cmp	r2, r3
 8002830:	d003      	beq.n	800283a <TIM_Base_SetConfig+0x2a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <TIM_Base_SetConfig+0xd8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2270      	movs	r2, #112	; 0x70
 800283e:	4393      	bics	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <TIM_Base_SetConfig+0xd4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d014      	beq.n	800287e <TIM_Base_SetConfig+0x6e>
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	05db      	lsls	r3, r3, #23
 800285a:	429a      	cmp	r2, r3
 800285c:	d00f      	beq.n	800287e <TIM_Base_SetConfig+0x6e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <TIM_Base_SetConfig+0xd8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00b      	beq.n	800287e <TIM_Base_SetConfig+0x6e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a20      	ldr	r2, [pc, #128]	; (80028ec <TIM_Base_SetConfig+0xdc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <TIM_Base_SetConfig+0x6e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <TIM_Base_SetConfig+0xe0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0x6e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <TIM_Base_SetConfig+0xe4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <TIM_Base_SetConfig+0xe8>)
 8002882:	4013      	ands	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	4393      	bics	r3, r2
 8002896:	001a      	movs	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <TIM_Base_SetConfig+0xd4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <TIM_Base_SetConfig+0xbe>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <TIM_Base_SetConfig+0xe0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d003      	beq.n	80028ce <TIM_Base_SetConfig+0xbe>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <TIM_Base_SetConfig+0xe4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d103      	bne.n	80028d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	615a      	str	r2, [r3, #20]
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40002000 	.word	0x40002000
 80028f0:	40014400 	.word	0x40014400
 80028f4:	40014800 	.word	0x40014800
 80028f8:	fffffcff 	.word	0xfffffcff

080028fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	2201      	movs	r2, #1
 800290c:	4393      	bics	r3, r2
 800290e:	001a      	movs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2270      	movs	r2, #112	; 0x70
 800292a:	4393      	bics	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2203      	movs	r2, #3
 8002932:	4393      	bics	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2202      	movs	r2, #2
 8002944:	4393      	bics	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <TIM_OC1_SetConfig+0xe8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <TIM_OC1_SetConfig+0x6e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <TIM_OC1_SetConfig+0xec>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <TIM_OC1_SetConfig+0x6e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a21      	ldr	r2, [pc, #132]	; (80029ec <TIM_OC1_SetConfig+0xf0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10c      	bne.n	8002984 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2208      	movs	r2, #8
 800296e:	4393      	bics	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2204      	movs	r2, #4
 8002980:	4393      	bics	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <TIM_OC1_SetConfig+0xe8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <TIM_OC1_SetConfig+0xa0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <TIM_OC1_SetConfig+0xec>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_OC1_SetConfig+0xa0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <TIM_OC1_SetConfig+0xf0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d111      	bne.n	80029c0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <TIM_OC1_SetConfig+0xf4>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <TIM_OC1_SetConfig+0xf8>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b006      	add	sp, #24
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40014400 	.word	0x40014400
 80029ec:	40014800 	.word	0x40014800
 80029f0:	fffffeff 	.word	0xfffffeff
 80029f4:	fffffdff 	.word	0xfffffdff

080029f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	2210      	movs	r2, #16
 8002a08:	4393      	bics	r3, r2
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <TIM_OC2_SetConfig+0xe0>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <TIM_OC2_SetConfig+0xe4>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2220      	movs	r2, #32
 8002a42:	4393      	bics	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <TIM_OC2_SetConfig+0xe8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10d      	bne.n	8002a76 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2280      	movs	r2, #128	; 0x80
 8002a5e:	4393      	bics	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	4393      	bics	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <TIM_OC2_SetConfig+0xe8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <TIM_OC2_SetConfig+0x96>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <TIM_OC2_SetConfig+0xec>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_OC2_SetConfig+0x96>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <TIM_OC2_SetConfig+0xf0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d113      	bne.n	8002ab6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4a16      	ldr	r2, [pc, #88]	; (8002aec <TIM_OC2_SetConfig+0xf4>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <TIM_OC2_SetConfig+0xf8>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	621a      	str	r2, [r3, #32]
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b006      	add	sp, #24
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	ffff8fff 	.word	0xffff8fff
 8002adc:	fffffcff 	.word	0xfffffcff
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40014400 	.word	0x40014400
 8002ae8:	40014800 	.word	0x40014800
 8002aec:	fffffbff 	.word	0xfffffbff
 8002af0:	fffff7ff 	.word	0xfffff7ff

08002af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <TIM_OC3_SetConfig+0xdc>)
 8002b04:	401a      	ands	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2270      	movs	r2, #112	; 0x70
 8002b20:	4393      	bics	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2203      	movs	r2, #3
 8002b28:	4393      	bics	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <TIM_OC3_SetConfig+0xe0>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <TIM_OC3_SetConfig+0xe4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10d      	bne.n	8002b6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <TIM_OC3_SetConfig+0xe8>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <TIM_OC3_SetConfig+0xec>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <TIM_OC3_SetConfig+0xe4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_OC3_SetConfig+0x92>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <TIM_OC3_SetConfig+0xf0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_OC3_SetConfig+0x92>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <TIM_OC3_SetConfig+0xf4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d113      	bne.n	8002bae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <TIM_OC3_SetConfig+0xf8>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <TIM_OC3_SetConfig+0xfc>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	621a      	str	r2, [r3, #32]
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b006      	add	sp, #24
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	fffffeff 	.word	0xfffffeff
 8002bd4:	fffffdff 	.word	0xfffffdff
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	fffff7ff 	.word	0xfffff7ff
 8002be0:	fffffbff 	.word	0xfffffbff
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	ffffefff 	.word	0xffffefff
 8002bf0:	ffffdfff 	.word	0xffffdfff

08002bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <TIM_OC4_SetConfig+0xa8>)
 8002c04:	401a      	ands	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <TIM_OC4_SetConfig+0xac>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a1f      	ldr	r2, [pc, #124]	; (8002ca4 <TIM_OC4_SetConfig+0xb0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <TIM_OC4_SetConfig+0xb4>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	031b      	lsls	r3, r3, #12
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a17      	ldr	r2, [pc, #92]	; (8002cac <TIM_OC4_SetConfig+0xb8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_OC4_SetConfig+0x70>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <TIM_OC4_SetConfig+0xbc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_OC4_SetConfig+0x70>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <TIM_OC4_SetConfig+0xc0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d109      	bne.n	8002c78 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <TIM_OC4_SetConfig+0xc4>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b006      	add	sp, #24
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	ffffefff 	.word	0xffffefff
 8002ca0:	ffff8fff 	.word	0xffff8fff
 8002ca4:	fffffcff 	.word	0xfffffcff
 8002ca8:	ffffdfff 	.word	0xffffdfff
 8002cac:	40012c00 	.word	0x40012c00
 8002cb0:	40014400 	.word	0x40014400
 8002cb4:	40014800 	.word	0x40014800
 8002cb8:	ffffbfff 	.word	0xffffbfff

08002cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	22f0      	movs	r2, #240	; 0xf0
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	220a      	movs	r2, #10
 8002cf8:	4393      	bics	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	621a      	str	r2, [r3, #32]
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b006      	add	sp, #24
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	4393      	bics	r3, r2
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <TIM_TI2_ConfigInputStage+0x60>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	22a0      	movs	r2, #160	; 0xa0
 8002d54:	4393      	bics	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b006      	add	sp, #24
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	ffff0fff 	.word	0xffff0fff

08002d7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2270      	movs	r2, #112	; 0x70
 8002d90:	4393      	bics	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	4a09      	ldr	r2, [pc, #36]	; (8002dec <TIM_ETR_SetConfig+0x3c>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b006      	add	sp, #24
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	ffff00ff 	.word	0xffff00ff

08002df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	221f      	movs	r2, #31
 8002e00:	4013      	ands	r3, r2
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	0013      	movs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	43d2      	mvns	r2, r2
 8002e12:	401a      	ands	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	211f      	movs	r1, #31
 8002e20:	400b      	ands	r3, r1
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4099      	lsls	r1, r3
 8002e26:	000b      	movs	r3, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b006      	add	sp, #24
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223c      	movs	r2, #60	; 0x3c
 8002e46:	5c9b      	ldrb	r3, [r3, r2]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e042      	b.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	223c      	movs	r2, #60	; 0x3c
 8002e54:	2101      	movs	r1, #1
 8002e56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	223d      	movs	r2, #61	; 0x3d
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2270      	movs	r2, #112	; 0x70
 8002e74:	4393      	bics	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00a      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d004      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	4393      	bics	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	223d      	movs	r2, #61	; 0x3d
 8002ec8:	2101      	movs	r1, #1
 8002eca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	223c      	movs	r2, #60	; 0x3c
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400

08002ee8 <__libc_init_array>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	2600      	movs	r6, #0
 8002eec:	4d0c      	ldr	r5, [pc, #48]	; (8002f20 <__libc_init_array+0x38>)
 8002eee:	4c0d      	ldr	r4, [pc, #52]	; (8002f24 <__libc_init_array+0x3c>)
 8002ef0:	1b64      	subs	r4, r4, r5
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	42a6      	cmp	r6, r4
 8002ef6:	d109      	bne.n	8002f0c <__libc_init_array+0x24>
 8002ef8:	2600      	movs	r6, #0
 8002efa:	f000 f821 	bl	8002f40 <_init>
 8002efe:	4d0a      	ldr	r5, [pc, #40]	; (8002f28 <__libc_init_array+0x40>)
 8002f00:	4c0a      	ldr	r4, [pc, #40]	; (8002f2c <__libc_init_array+0x44>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	42a6      	cmp	r6, r4
 8002f08:	d105      	bne.n	8002f16 <__libc_init_array+0x2e>
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	00b3      	lsls	r3, r6, #2
 8002f0e:	58eb      	ldr	r3, [r5, r3]
 8002f10:	4798      	blx	r3
 8002f12:	3601      	adds	r6, #1
 8002f14:	e7ee      	b.n	8002ef4 <__libc_init_array+0xc>
 8002f16:	00b3      	lsls	r3, r6, #2
 8002f18:	58eb      	ldr	r3, [r5, r3]
 8002f1a:	4798      	blx	r3
 8002f1c:	3601      	adds	r6, #1
 8002f1e:	e7f2      	b.n	8002f06 <__libc_init_array+0x1e>
 8002f20:	08002fbc 	.word	0x08002fbc
 8002f24:	08002fbc 	.word	0x08002fbc
 8002f28:	08002fbc 	.word	0x08002fbc
 8002f2c:	08002fc0 	.word	0x08002fc0

08002f30 <memset>:
 8002f30:	0003      	movs	r3, r0
 8002f32:	1882      	adds	r2, r0, r2
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d100      	bne.n	8002f3a <memset+0xa>
 8002f38:	4770      	bx	lr
 8002f3a:	7019      	strb	r1, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	e7f9      	b.n	8002f34 <memset+0x4>

08002f40 <_init>:
 8002f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f46:	bc08      	pop	{r3}
 8002f48:	469e      	mov	lr, r3
 8002f4a:	4770      	bx	lr

08002f4c <_fini>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr
